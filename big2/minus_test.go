package big2

// Generated by dectest. DO NOT EDIT

import "math/big"

var minusTests = []struct {
	id      string
	in      string
	out     string
	inexact bool
	prec    uint
	mode    big.RoundingMode
}{
	// version: 2.62
	// This set of tests primarily tests the existence of the operator.
	// Subtraction, rounding, and more overflows are tested elsewhere.
	// extended: 1
	// precision: 9
	// rounding: half_up
	// maxexponent: 384
	// minexponent: -383
	// minx001 minus '1'      -> '-1'
	{"minx001", "1", "-1", false, 9, big.ToNearestAway},
	// minx002 minus '-1'     -> '1'
	{"minx002", "-1", "1", false, 9, big.ToNearestAway},
	// minx003 minus '1.00'   -> '-1.00'
	{"minx003", "1.00", "-1.00", false, 9, big.ToNearestAway},
	// minx004 minus '-1.00'  -> '1.00'
	{"minx004", "-1.00", "1.00", false, 9, big.ToNearestAway},
	// minx005 minus '0'      -> '0'
	{"minx005", "0", "0", false, 9, big.ToNearestAway},
	// minx006 minus '0.00'   -> '0.00'
	{"minx006", "0.00", "0.00", false, 9, big.ToNearestAway},
	// minx007 minus '00.0'   -> '0.0'
	{"minx007", "00.0", "0.0", false, 9, big.ToNearestAway},
	// minx008 minus '00.00'  -> '0.00'
	{"minx008", "00.00", "0.00", false, 9, big.ToNearestAway},
	// minx009 minus '00'     -> '0'
	{"minx009", "00", "0", false, 9, big.ToNearestAway},
	// minx010 minus '-2'     -> '2'
	{"minx010", "-2", "2", false, 9, big.ToNearestAway},
	// minx011 minus '2'      -> '-2'
	{"minx011", "2", "-2", false, 9, big.ToNearestAway},
	// minx012 minus '-2.00'  -> '2.00'
	{"minx012", "-2.00", "2.00", false, 9, big.ToNearestAway},
	// minx013 minus '2.00'   -> '-2.00'
	{"minx013", "2.00", "-2.00", false, 9, big.ToNearestAway},
	// minx014 minus '-0'     -> '0'
	{"minx014", "-0", "0", false, 9, big.ToNearestAway},
	// minx015 minus '-0.00'  -> '0.00'
	{"minx015", "-0.00", "0.00", false, 9, big.ToNearestAway},
	// minx016 minus '-00.0'  -> '0.0'
	{"minx016", "-00.0", "0.0", false, 9, big.ToNearestAway},
	// minx017 minus '-00.00' -> '0.00'
	{"minx017", "-00.00", "0.00", false, 9, big.ToNearestAway},
	// minx018 minus '-00'    -> '0'
	{"minx018", "-00", "0", false, 9, big.ToNearestAway},
	// "lhs" zeros in plus and minus have exponent = operand
	// minx020 minus '-0E3'   -> '0E+3'
	{"minx020", "-0E3", "0E+3", false, 9, big.ToNearestAway},
	// minx021 minus '-0E2'   -> '0E+2'
	{"minx021", "-0E2", "0E+2", false, 9, big.ToNearestAway},
	// minx022 minus '-0E1'   -> '0E+1'
	{"minx022", "-0E1", "0E+1", false, 9, big.ToNearestAway},
	// minx023 minus '-0E0'   -> '0'
	{"minx023", "-0E0", "0", false, 9, big.ToNearestAway},
	// minx024 minus '+0E0'   -> '0'
	{"minx024", "+0E0", "0", false, 9, big.ToNearestAway},
	// minx025 minus '+0E1'   -> '0E+1'
	{"minx025", "+0E1", "0E+1", false, 9, big.ToNearestAway},
	// minx026 minus '+0E2'   -> '0E+2'
	{"minx026", "+0E2", "0E+2", false, 9, big.ToNearestAway},
	// minx027 minus '+0E3'   -> '0E+3'
	{"minx027", "+0E3", "0E+3", false, 9, big.ToNearestAway},
	// minx030 minus '-5E3'   -> '5E+3'
	{"minx030", "-5E3", "5E+3", false, 9, big.ToNearestAway},
	// minx031 minus '-5E8'   -> '5E+8'
	{"minx031", "-5E8", "5E+8", false, 9, big.ToNearestAway},
	// minx032 minus '-5E13'  -> '5E+13'
	{"minx032", "-5E13", "5E+13", false, 9, big.ToNearestAway},
	// minx033 minus '-5E18'  -> '5E+18'
	{"minx033", "-5E18", "5E+18", false, 9, big.ToNearestAway},
	// minx034 minus '+5E3'   -> '-5E+3'
	{"minx034", "+5E3", "-5E+3", false, 9, big.ToNearestAway},
	// minx035 minus '+5E8'   -> '-5E+8'
	{"minx035", "+5E8", "-5E+8", false, 9, big.ToNearestAway},
	// minx036 minus '+5E13'  -> '-5E+13'
	{"minx036", "+5E13", "-5E+13", false, 9, big.ToNearestAway},
	// minx037 minus '+5E18'  -> '-5E+18'
	{"minx037", "+5E18", "-5E+18", false, 9, big.ToNearestAway},
	// minx050 minus '-2000000' -> '2000000'
	{"minx050", "-2000000", "2000000", false, 9, big.ToNearestAway},
	// minx051 minus '2000000'  -> '-2000000'
	{"minx051", "2000000", "-2000000", false, 9, big.ToNearestAway},
	// precision: 7
	// minx052 minus '-2000000' -> '2000000'
	{"minx052", "-2000000", "2000000", false, 7, big.ToNearestAway},
	// minx053 minus '2000000'  -> '-2000000'
	{"minx053", "2000000", "-2000000", false, 7, big.ToNearestAway},
	// precision: 6
	// minx054 minus '-2000000' -> '2.00000E+6' Rounded
	{"minx054", "-2000000", "2.00000E+6", false, 6, big.ToNearestAway},
	// minx055 minus '2000000'  -> '-2.00000E+6' Rounded
	{"minx055", "2000000", "-2.00000E+6", false, 6, big.ToNearestAway},
	// precision: 3
	// minx056 minus '-2000000' -> '2.00E+6' Rounded
	{"minx056", "-2000000", "2.00E+6", false, 3, big.ToNearestAway},
	// minx057 minus '2000000'  -> '-2.00E+6' Rounded
	{"minx057", "2000000", "-2.00E+6", false, 3, big.ToNearestAway},
	// more fixed, potential LHS swaps/overlays if done by 0 subtract x
	// precision: 9
	// minx060 minus '56267E-10'   -> '-0.0000056267'
	{"minx060", "56267E-10", "-0.0000056267", false, 9, big.ToNearestAway},
	// minx061 minus '56267E-5'    -> '-0.56267'
	{"minx061", "56267E-5", "-0.56267", false, 9, big.ToNearestAway},
	// minx062 minus '56267E-2'    -> '-562.67'
	{"minx062", "56267E-2", "-562.67", false, 9, big.ToNearestAway},
	// minx063 minus '56267E-1'    -> '-5626.7'
	{"minx063", "56267E-1", "-5626.7", false, 9, big.ToNearestAway},
	// minx065 minus '56267E-0'    -> '-56267'
	{"minx065", "56267E-0", "-56267", false, 9, big.ToNearestAway},
	// minx066 minus '56267E+0'    -> '-56267'
	{"minx066", "56267E+0", "-56267", false, 9, big.ToNearestAway},
	// minx067 minus '56267E+1'    -> '-5.6267E+5'
	{"minx067", "56267E+1", "-5.6267E+5", false, 9, big.ToNearestAway},
	// minx068 minus '56267E+2'    -> '-5.6267E+6'
	{"minx068", "56267E+2", "-5.6267E+6", false, 9, big.ToNearestAway},
	// minx069 minus '56267E+3'    -> '-5.6267E+7'
	{"minx069", "56267E+3", "-5.6267E+7", false, 9, big.ToNearestAway},
	// minx070 minus '56267E+4'    -> '-5.6267E+8'
	{"minx070", "56267E+4", "-5.6267E+8", false, 9, big.ToNearestAway},
	// minx071 minus '56267E+5'    -> '-5.6267E+9'
	{"minx071", "56267E+5", "-5.6267E+9", false, 9, big.ToNearestAway},
	// minx072 minus '56267E+6'    -> '-5.6267E+10'
	{"minx072", "56267E+6", "-5.6267E+10", false, 9, big.ToNearestAway},
	// minx080 minus '-56267E-10'  -> '0.0000056267'
	{"minx080", "-56267E-10", "0.0000056267", false, 9, big.ToNearestAway},
	// minx081 minus '-56267E-5'   -> '0.56267'
	{"minx081", "-56267E-5", "0.56267", false, 9, big.ToNearestAway},
	// minx082 minus '-56267E-2'   -> '562.67'
	{"minx082", "-56267E-2", "562.67", false, 9, big.ToNearestAway},
	// minx083 minus '-56267E-1'   -> '5626.7'
	{"minx083", "-56267E-1", "5626.7", false, 9, big.ToNearestAway},
	// minx085 minus '-56267E-0'   -> '56267'
	{"minx085", "-56267E-0", "56267", false, 9, big.ToNearestAway},
	// minx086 minus '-56267E+0'   -> '56267'
	{"minx086", "-56267E+0", "56267", false, 9, big.ToNearestAway},
	// minx087 minus '-56267E+1'   -> '5.6267E+5'
	{"minx087", "-56267E+1", "5.6267E+5", false, 9, big.ToNearestAway},
	// minx088 minus '-56267E+2'   -> '5.6267E+6'
	{"minx088", "-56267E+2", "5.6267E+6", false, 9, big.ToNearestAway},
	// minx089 minus '-56267E+3'   -> '5.6267E+7'
	{"minx089", "-56267E+3", "5.6267E+7", false, 9, big.ToNearestAway},
	// minx090 minus '-56267E+4'   -> '5.6267E+8'
	{"minx090", "-56267E+4", "5.6267E+8", false, 9, big.ToNearestAway},
	// minx091 minus '-56267E+5'   -> '5.6267E+9'
	{"minx091", "-56267E+5", "5.6267E+9", false, 9, big.ToNearestAway},
	// minx092 minus '-56267E+6'   -> '5.6267E+10'
	{"minx092", "-56267E+6", "5.6267E+10", false, 9, big.ToNearestAway},
	// overflow tests
	// maxexponent: 999999999
	// minexponent: -999999999
	// precision: 3
	// minx100 minus 9.999E+999999999  -> -Infinity Inexact Overflow Rounded
	{"minx100", "9.999E+999999999", "-Inf", true, 3, big.ToNearestAway},
	// minx101 minus -9.999E+999999999 ->  Infinity Inexact Overflow Rounded
	{"minx101", "-9.999E+999999999", "Inf", true, 3, big.ToNearestAway},
	// subnormals and underflow
	// precision: 3
	// maxexponent: 999
	// minexponent: -999
	// minx110 minus  1.00E-999        ->  -1.00E-999
	{"minx110", "1.00E-999", "-1.00E-999", false, 3, big.ToNearestAway},
	// minx111 minus  0.1E-999         ->  -1E-1000   Subnormal
	{"minx111", "0.1E-999", "-1E-1000", false, 3, big.ToNearestAway},
	// minx112 minus  0.10E-999        ->  -1.0E-1000 Subnormal
	{"minx112", "0.10E-999", "-1.0E-1000", false, 3, big.ToNearestAway},
	// minx113 minus  0.100E-999       ->  -1.0E-1000 Subnormal Rounded
	{"minx113", "0.100E-999", "-1.0E-1000", false, 3, big.ToNearestAway},
	// minx114 minus  0.01E-999        ->  -1E-1001   Subnormal
	{"minx114", "0.01E-999", "-1E-1001", false, 3, big.ToNearestAway},
	// next is rounded to Emin
	// minx115 minus  0.999E-999       ->  -1.00E-999 Inexact Rounded Subnormal Underflow
	{"minx115", "0.999E-999", "-1.00E-999", true, 3, big.ToNearestAway},
	// minx116 minus  0.099E-999       ->  -1.0E-1000 Inexact Rounded Subnormal Underflow
	{"minx116", "0.099E-999", "-1.0E-1000", true, 3, big.ToNearestAway},
	// minx117 minus  0.009E-999       ->  -1E-1001   Inexact Rounded Subnormal Underflow
	{"minx117", "0.009E-999", "-1E-1001", true, 3, big.ToNearestAway},
	// minx118 minus  0.001E-999       ->  -0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx118", "0.001E-999", "-0E-1001", true, 3, big.ToNearestAway},
	// minx119 minus  0.0009E-999      ->  -0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx119", "0.0009E-999", "-0E-1001", true, 3, big.ToNearestAway},
	// minx120 minus  0.0001E-999      ->  -0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx120", "0.0001E-999", "-0E-1001", true, 3, big.ToNearestAway},
	// minx130 minus -1.00E-999        ->   1.00E-999
	{"minx130", "-1.00E-999", "1.00E-999", false, 3, big.ToNearestAway},
	// minx131 minus -0.1E-999         ->   1E-1000   Subnormal
	{"minx131", "-0.1E-999", "1E-1000", false, 3, big.ToNearestAway},
	// minx132 minus -0.10E-999        ->   1.0E-1000 Subnormal
	{"minx132", "-0.10E-999", "1.0E-1000", false, 3, big.ToNearestAway},
	// minx133 minus -0.100E-999       ->   1.0E-1000 Subnormal Rounded
	{"minx133", "-0.100E-999", "1.0E-1000", false, 3, big.ToNearestAway},
	// minx134 minus -0.01E-999        ->   1E-1001   Subnormal
	{"minx134", "-0.01E-999", "1E-1001", false, 3, big.ToNearestAway},
	// next is rounded to Emin
	// minx135 minus -0.999E-999       ->   1.00E-999 Inexact Rounded Subnormal Underflow
	{"minx135", "-0.999E-999", "1.00E-999", true, 3, big.ToNearestAway},
	// minx136 minus -0.099E-999       ->   1.0E-1000 Inexact Rounded Subnormal Underflow
	{"minx136", "-0.099E-999", "1.0E-1000", true, 3, big.ToNearestAway},
	// minx137 minus -0.009E-999       ->   1E-1001   Inexact Rounded Subnormal Underflow
	{"minx137", "-0.009E-999", "1E-1001", true, 3, big.ToNearestAway},
	// minx138 minus -0.001E-999       ->   0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx138", "-0.001E-999", "0E-1001", true, 3, big.ToNearestAway},
	// minx139 minus -0.0009E-999      ->   0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx139", "-0.0009E-999", "0E-1001", true, 3, big.ToNearestAway},
	// minx140 minus -0.0001E-999      ->   0E-1001   Inexact Rounded Subnormal Underflow Clamped
	{"minx140", "-0.0001E-999", "0E-1001", true, 3, big.ToNearestAway},
	// long operand checks
	// maxexponent: 999
	// minexponent: -999
	// precision: 9
	// minx301 minus 12345678000  -> -1.23456780E+10 Rounded
	{"minx301", "12345678000", "-1.23456780E+10", false, 9, big.ToNearestAway},
	// minx302 minus 1234567800   -> -1.23456780E+9 Rounded
	{"minx302", "1234567800", "-1.23456780E+9", false, 9, big.ToNearestAway},
	// minx303 minus 1234567890   -> -1.23456789E+9 Rounded
	{"minx303", "1234567890", "-1.23456789E+9", false, 9, big.ToNearestAway},
	// minx304 minus 1234567891   -> -1.23456789E+9 Inexact Rounded
	{"minx304", "1234567891", "-1.23456789E+9", true, 9, big.ToNearestAway},
	// minx305 minus 12345678901  -> -1.23456789E+10 Inexact Rounded
	{"minx305", "12345678901", "-1.23456789E+10", true, 9, big.ToNearestAway},
	// minx306 minus 1234567896   -> -1.23456790E+9 Inexact Rounded
	{"minx306", "1234567896", "-1.23456790E+9", true, 9, big.ToNearestAway},
	// precision: 15
	// still checking
	// minx321 minus 12345678000  -> -12345678000
	{"minx321", "12345678000", "-12345678000", false, 15, big.ToNearestAway},
	// minx322 minus 1234567800   -> -1234567800
	{"minx322", "1234567800", "-1234567800", false, 15, big.ToNearestAway},
	// minx323 minus 1234567890   -> -1234567890
	{"minx323", "1234567890", "-1234567890", false, 15, big.ToNearestAway},
	// minx324 minus 1234567891   -> -1234567891
	{"minx324", "1234567891", "-1234567891", false, 15, big.ToNearestAway},
	// minx325 minus 12345678901  -> -12345678901
	{"minx325", "12345678901", "-12345678901", false, 15, big.ToNearestAway},
	// minx326 minus 1234567896   -> -1234567896
	{"minx326", "1234567896", "-1234567896", false, 15, big.ToNearestAway},
	// specials
	// minx420 minus 'Inf'    -> '-Infinity'
	{"minx420", "Inf", "-Inf", false, 15, big.ToNearestAway},
	// minx421 minus '-Inf'   -> 'Infinity'
	{"minx421", "-Inf", "Inf", false, 15, big.ToNearestAway},
	// SKIP (NaN): minx422 minus   NaN    ->  NaN
	// SKIP (NaN): minx423 minus  sNaN    ->  NaN    Invalid_operation
	// SKIP (NaN): minx424 minus   NaN255 ->  NaN255
	// SKIP (NaN): minx425 minus  sNaN256 ->  NaN256 Invalid_operation
	// SKIP (NaN): minx426 minus  -NaN    -> -NaN
	// SKIP (NaN): minx427 minus -sNaN    -> -NaN    Invalid_operation
	// SKIP (NaN): minx428 minus  -NaN255 -> -NaN255
	// SKIP (NaN): minx429 minus -sNaN256 -> -NaN256 Invalid_operation
	// Null tests
	// SKIP (NaN): minx900 minus  # -> NaN Invalid_operation
}
