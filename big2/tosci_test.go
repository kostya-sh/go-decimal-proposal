package big2

// Generated by dectest. DO NOT EDIT

import "math/big"

var toSciTests = []struct {
	id      string
	in      string
	out     string
	inexact bool
	prec    uint
	mode    big.RoundingMode
}{
	// version: 2.62
	// extended: 1
	// This file tests base conversions from string to a decimal number
	// and back to a string (in either Scientific or Engineering form)
	// Note that unlike other operations the operand is subject to rounding
	// to conform to emax and precision settings (that is, numbers will
	// conform to rules and exponent will be in permitted range).
	// precision: 16
	// rounding: half_up
	// maxexponent: 384
	// minexponent: -383
	// basx001 toSci       0 -> 0
	{"basx001", "0", "0", false, 16, big.ToNearestAway},
	// basx002 toSci       1 -> 1
	{"basx002", "1", "1", false, 16, big.ToNearestAway},
	// basx003 toSci     1.0 -> 1.0
	{"basx003", "1.0", "1.0", false, 16, big.ToNearestAway},
	// basx004 toSci    1.00 -> 1.00
	{"basx004", "1.00", "1.00", false, 16, big.ToNearestAway},
	// basx005 toSci      10 -> 10
	{"basx005", "10", "10", false, 16, big.ToNearestAway},
	// basx006 toSci    1000 -> 1000
	{"basx006", "1000", "1000", false, 16, big.ToNearestAway},
	// basx007 toSci    10.0 -> 10.0
	{"basx007", "10.0", "10.0", false, 16, big.ToNearestAway},
	// basx008 toSci    10.1 -> 10.1
	{"basx008", "10.1", "10.1", false, 16, big.ToNearestAway},
	// basx009 toSci    10.4 -> 10.4
	{"basx009", "10.4", "10.4", false, 16, big.ToNearestAway},
	// basx010 toSci    10.5 -> 10.5
	{"basx010", "10.5", "10.5", false, 16, big.ToNearestAway},
	// basx011 toSci    10.6 -> 10.6
	{"basx011", "10.6", "10.6", false, 16, big.ToNearestAway},
	// basx012 toSci    10.9 -> 10.9
	{"basx012", "10.9", "10.9", false, 16, big.ToNearestAway},
	// basx013 toSci    11.0 -> 11.0
	{"basx013", "11.0", "11.0", false, 16, big.ToNearestAway},
	// basx014 toSci  1.234 -> 1.234
	{"basx014", "1.234", "1.234", false, 16, big.ToNearestAway},
	// basx015 toSci  0.123 -> 0.123
	{"basx015", "0.123", "0.123", false, 16, big.ToNearestAway},
	// basx016 toSci  0.012 -> 0.012
	{"basx016", "0.012", "0.012", false, 16, big.ToNearestAway},
	// basx017 toSci  -0    -> -0
	{"basx017", "-0", "-0", false, 16, big.ToNearestAway},
	// basx018 toSci  -0.0  -> -0.0
	{"basx018", "-0.0", "-0.0", false, 16, big.ToNearestAway},
	// basx019 toSci -00.00 -> -0.00
	{"basx019", "-00.00", "-0.00", false, 16, big.ToNearestAway},
	// basx021 toSci     -1 -> -1
	{"basx021", "-1", "-1", false, 16, big.ToNearestAway},
	// basx022 toSci   -1.0 -> -1.0
	{"basx022", "-1.0", "-1.0", false, 16, big.ToNearestAway},
	// basx023 toSci   -0.1 -> -0.1
	{"basx023", "-0.1", "-0.1", false, 16, big.ToNearestAway},
	// basx024 toSci   -9.1 -> -9.1
	{"basx024", "-9.1", "-9.1", false, 16, big.ToNearestAway},
	// basx025 toSci   -9.11 -> -9.11
	{"basx025", "-9.11", "-9.11", false, 16, big.ToNearestAway},
	// basx026 toSci   -9.119 -> -9.119
	{"basx026", "-9.119", "-9.119", false, 16, big.ToNearestAway},
	// basx027 toSci   -9.999 -> -9.999
	{"basx027", "-9.999", "-9.999", false, 16, big.ToNearestAway},
	// basx030 toSci  '123456789.123456'   -> '123456789.123456'
	{"basx030", "123456789.123456", "123456789.123456", false, 16, big.ToNearestAway},
	// basx031 toSci  '123456789.000000'   -> '123456789.000000'
	{"basx031", "123456789.000000", "123456789.000000", false, 16, big.ToNearestAway},
	// basx032 toSci   '123456789123456'   -> '123456789123456'
	{"basx032", "123456789123456", "123456789123456", false, 16, big.ToNearestAway},
	// basx033 toSci   '0.0000123456789'   -> '0.0000123456789'
	{"basx033", "0.0000123456789", "0.0000123456789", false, 16, big.ToNearestAway},
	// basx034 toSci  '0.00000123456789'   -> '0.00000123456789'
	{"basx034", "0.00000123456789", "0.00000123456789", false, 16, big.ToNearestAway},
	// basx035 toSci '0.000000123456789'   -> '1.23456789E-7'
	{"basx035", "0.000000123456789", "1.23456789E-7", false, 16, big.ToNearestAway},
	// basx036 toSci '0.0000000123456789'  -> '1.23456789E-8'
	{"basx036", "0.0000000123456789", "1.23456789E-8", false, 16, big.ToNearestAway},
	// basx037 toSci '0.123456789012344'   -> '0.123456789012344'
	{"basx037", "0.123456789012344", "0.123456789012344", false, 16, big.ToNearestAway},
	// basx038 toSci '0.123456789012345'   -> '0.123456789012345'
	{"basx038", "0.123456789012345", "0.123456789012345", false, 16, big.ToNearestAway},
	// String [many more examples are implicitly tested elsewhere]
	// strings without E cannot generate E in result
	// basx040 toSci "12"        -> '12'
	{"basx040", "12", "12", false, 16, big.ToNearestAway},
	// basx041 toSci "-76"       -> '-76'
	{"basx041", "-76", "-76", false, 16, big.ToNearestAway},
	// basx042 toSci "12.76"     -> '12.76'
	{"basx042", "12.76", "12.76", false, 16, big.ToNearestAway},
	// basx043 toSci "+12.76"    -> '12.76'
	{"basx043", "+12.76", "12.76", false, 16, big.ToNearestAway},
	// basx044 toSci "012.76"    -> '12.76'
	{"basx044", "012.76", "12.76", false, 16, big.ToNearestAway},
	// basx045 toSci "+0.003"    -> '0.003'
	{"basx045", "+0.003", "0.003", false, 16, big.ToNearestAway},
	// basx046 toSci "17."       -> '17'
	{"basx046", "17.", "17", false, 16, big.ToNearestAway},
	// basx047 toSci ".5"        -> '0.5'
	{"basx047", ".5", "0.5", false, 16, big.ToNearestAway},
	// basx048 toSci "044"       -> '44'
	{"basx048", "044", "44", false, 16, big.ToNearestAway},
	// basx049 toSci "0044"      -> '44'
	{"basx049", "0044", "44", false, 16, big.ToNearestAway},
	// basx050 toSci "0.0005"      -> '0.0005'
	{"basx050", "0.0005", "0.0005", false, 16, big.ToNearestAway},
	// basx051 toSci "00.00005"    -> '0.00005'
	{"basx051", "00.00005", "0.00005", false, 16, big.ToNearestAway},
	// basx052 toSci "0.000005"    -> '0.000005'
	{"basx052", "0.000005", "0.000005", false, 16, big.ToNearestAway},
	// basx053 toSci "0.0000050"   -> '0.0000050'
	{"basx053", "0.0000050", "0.0000050", false, 16, big.ToNearestAway},
	// basx054 toSci "0.0000005"   -> '5E-7'
	{"basx054", "0.0000005", "5E-7", false, 16, big.ToNearestAway},
	// basx055 toSci "0.00000005"  -> '5E-8'
	{"basx055", "0.00000005", "5E-8", false, 16, big.ToNearestAway},
	// basx056 toSci "12345678.543210" -> '12345678.543210'
	{"basx056", "12345678.543210", "12345678.543210", false, 16, big.ToNearestAway},
	// basx057 toSci "2345678.543210" -> '2345678.543210'
	{"basx057", "2345678.543210", "2345678.543210", false, 16, big.ToNearestAway},
	// basx058 toSci "345678.543210" -> '345678.543210'
	{"basx058", "345678.543210", "345678.543210", false, 16, big.ToNearestAway},
	// basx059 toSci "0345678.54321" -> '345678.54321'
	{"basx059", "0345678.54321", "345678.54321", false, 16, big.ToNearestAway},
	// basx060 toSci "345678.5432" -> '345678.5432'
	{"basx060", "345678.5432", "345678.5432", false, 16, big.ToNearestAway},
	// basx061 toSci "+345678.5432" -> '345678.5432'
	{"basx061", "+345678.5432", "345678.5432", false, 16, big.ToNearestAway},
	// basx062 toSci "+0345678.5432" -> '345678.5432'
	{"basx062", "+0345678.5432", "345678.5432", false, 16, big.ToNearestAway},
	// basx063 toSci "+00345678.5432" -> '345678.5432'
	{"basx063", "+00345678.5432", "345678.5432", false, 16, big.ToNearestAway},
	// basx064 toSci "-345678.5432"  -> '-345678.5432'
	{"basx064", "-345678.5432", "-345678.5432", false, 16, big.ToNearestAway},
	// basx065 toSci "-0345678.5432"  -> '-345678.5432'
	{"basx065", "-0345678.5432", "-345678.5432", false, 16, big.ToNearestAway},
	// basx066 toSci "-00345678.5432"  -> '-345678.5432'
	{"basx066", "-00345678.5432", "-345678.5432", false, 16, big.ToNearestAway},
	// examples
	// basx067 toSci "5E-6"        -> '0.000005'
	{"basx067", "5E-6", "0.000005", false, 16, big.ToNearestAway},
	// basx068 toSci "50E-7"       -> '0.0000050'
	{"basx068", "50E-7", "0.0000050", false, 16, big.ToNearestAway},
	// basx069 toSci "5E-7"        -> '5E-7'
	{"basx069", "5E-7", "5E-7", false, 16, big.ToNearestAway},
	// [No exotics as no Unicode]
	// rounded with dots in all (including edge) places
	// basx071 toSci  .1234567890123456123  -> 0.1234567890123456 Inexact Rounded
	{"basx071", ".1234567890123456123", "0.1234567890123456", true, 16, big.ToNearestAway},
	// basx072 toSci  1.234567890123456123  -> 1.234567890123456 Inexact Rounded
	{"basx072", "1.234567890123456123", "1.234567890123456", true, 16, big.ToNearestAway},
	// basx073 toSci  12.34567890123456123  -> 12.34567890123456 Inexact Rounded
	{"basx073", "12.34567890123456123", "12.34567890123456", true, 16, big.ToNearestAway},
	// basx074 toSci  123.4567890123456123  -> 123.4567890123456 Inexact Rounded
	{"basx074", "123.4567890123456123", "123.4567890123456", true, 16, big.ToNearestAway},
	// basx075 toSci  1234.567890123456123  -> 1234.567890123456 Inexact Rounded
	{"basx075", "1234.567890123456123", "1234.567890123456", true, 16, big.ToNearestAway},
	// basx076 toSci  12345.67890123456123  -> 12345.67890123456 Inexact Rounded
	{"basx076", "12345.67890123456123", "12345.67890123456", true, 16, big.ToNearestAway},
	// basx077 toSci  123456.7890123456123  -> 123456.7890123456 Inexact Rounded
	{"basx077", "123456.7890123456123", "123456.7890123456", true, 16, big.ToNearestAway},
	// basx078 toSci  1234567.890123456123  -> 1234567.890123456 Inexact Rounded
	{"basx078", "1234567.890123456123", "1234567.890123456", true, 16, big.ToNearestAway},
	// basx079 toSci  12345678.90123456123  -> 12345678.90123456 Inexact Rounded
	{"basx079", "12345678.90123456123", "12345678.90123456", true, 16, big.ToNearestAway},
	// basx080 toSci  123456789.0123456123  -> 123456789.0123456 Inexact Rounded
	{"basx080", "123456789.0123456123", "123456789.0123456", true, 16, big.ToNearestAway},
	// basx081 toSci  1234567890.123456123  -> 1234567890.123456 Inexact Rounded
	{"basx081", "1234567890.123456123", "1234567890.123456", true, 16, big.ToNearestAway},
	// basx082 toSci  12345678901.23456123  -> 12345678901.23456 Inexact Rounded
	{"basx082", "12345678901.23456123", "12345678901.23456", true, 16, big.ToNearestAway},
	// basx083 toSci  123456789012.3456123  -> 123456789012.3456 Inexact Rounded
	{"basx083", "123456789012.3456123", "123456789012.3456", true, 16, big.ToNearestAway},
	// basx084 toSci  1234567890123.456123  -> 1234567890123.456 Inexact Rounded
	{"basx084", "1234567890123.456123", "1234567890123.456", true, 16, big.ToNearestAway},
	// basx085 toSci  12345678901234.56123  -> 12345678901234.56 Inexact Rounded
	{"basx085", "12345678901234.56123", "12345678901234.56", true, 16, big.ToNearestAway},
	// basx086 toSci  123456789012345.6123  -> 123456789012345.6 Inexact Rounded
	{"basx086", "123456789012345.6123", "123456789012345.6", true, 16, big.ToNearestAway},
	// basx087 toSci  1234567890123456.123  -> 1234567890123456  Inexact Rounded
	{"basx087", "1234567890123456.123", "1234567890123456", true, 16, big.ToNearestAway},
	// basx088 toSci  12345678901234561.23  -> 1.234567890123456E+16 Inexact Rounded
	{"basx088", "12345678901234561.23", "1.234567890123456E+16", true, 16, big.ToNearestAway},
	// basx089 toSci  123456789012345612.3  -> 1.234567890123456E+17 Inexact Rounded
	{"basx089", "123456789012345612.3", "1.234567890123456E+17", true, 16, big.ToNearestAway},
	// basx090 toSci  1234567890123456123.  -> 1.234567890123456E+18 Inexact Rounded
	{"basx090", "1234567890123456123.", "1.234567890123456E+18", true, 16, big.ToNearestAway},
	// Numbers with E
	// basx130 toSci "0.000E-1"  -> '0.0000'
	{"basx130", "0.000E-1", "0.0000", false, 16, big.ToNearestAway},
	// basx131 toSci "0.000E-2"  -> '0.00000'
	{"basx131", "0.000E-2", "0.00000", false, 16, big.ToNearestAway},
	// basx132 toSci "0.000E-3"  -> '0.000000'
	{"basx132", "0.000E-3", "0.000000", false, 16, big.ToNearestAway},
	// basx133 toSci "0.000E-4"  -> '0E-7'
	{"basx133", "0.000E-4", "0E-7", false, 16, big.ToNearestAway},
	// basx134 toSci "0.00E-2"   -> '0.0000'
	{"basx134", "0.00E-2", "0.0000", false, 16, big.ToNearestAway},
	// basx135 toSci "0.00E-3"   -> '0.00000'
	{"basx135", "0.00E-3", "0.00000", false, 16, big.ToNearestAway},
	// basx136 toSci "0.00E-4"   -> '0.000000'
	{"basx136", "0.00E-4", "0.000000", false, 16, big.ToNearestAway},
	// basx137 toSci "0.00E-5"   -> '0E-7'
	{"basx137", "0.00E-5", "0E-7", false, 16, big.ToNearestAway},
	// basx138 toSci "+0E+9"     -> '0E+9'
	{"basx138", "+0E+9", "0E+9", false, 16, big.ToNearestAway},
	// basx139 toSci "-0E+9"     -> '-0E+9'
	{"basx139", "-0E+9", "-0E+9", false, 16, big.ToNearestAway},
	// basx140 toSci "1E+9"      -> '1E+9'
	{"basx140", "1E+9", "1E+9", false, 16, big.ToNearestAway},
	// basx141 toSci "1e+09"     -> '1E+9'
	{"basx141", "1e+09", "1E+9", false, 16, big.ToNearestAway},
	// basx142 toSci "1E+90"     -> '1E+90'
	{"basx142", "1E+90", "1E+90", false, 16, big.ToNearestAway},
	// basx143 toSci "+1E+009"   -> '1E+9'
	{"basx143", "+1E+009", "1E+9", false, 16, big.ToNearestAway},
	// basx144 toSci "0E+9"      -> '0E+9'
	{"basx144", "0E+9", "0E+9", false, 16, big.ToNearestAway},
	// basx145 toSci "1E+9"      -> '1E+9'
	{"basx145", "1E+9", "1E+9", false, 16, big.ToNearestAway},
	// basx146 toSci "1E+09"     -> '1E+9'
	{"basx146", "1E+09", "1E+9", false, 16, big.ToNearestAway},
	// basx147 toSci "1e+90"     -> '1E+90'
	{"basx147", "1e+90", "1E+90", false, 16, big.ToNearestAway},
	// basx148 toSci "1E+009"    -> '1E+9'
	{"basx148", "1E+009", "1E+9", false, 16, big.ToNearestAway},
	// basx149 toSci "000E+9"    -> '0E+9'
	{"basx149", "000E+9", "0E+9", false, 16, big.ToNearestAway},
	// basx150 toSci "1E9"       -> '1E+9'
	{"basx150", "1E9", "1E+9", false, 16, big.ToNearestAway},
	// basx151 toSci "1e09"      -> '1E+9'
	{"basx151", "1e09", "1E+9", false, 16, big.ToNearestAway},
	// basx152 toSci "1E90"      -> '1E+90'
	{"basx152", "1E90", "1E+90", false, 16, big.ToNearestAway},
	// basx153 toSci "1E009"     -> '1E+9'
	{"basx153", "1E009", "1E+9", false, 16, big.ToNearestAway},
	// basx154 toSci "0E9"       -> '0E+9'
	{"basx154", "0E9", "0E+9", false, 16, big.ToNearestAway},
	// basx155 toSci "0.000e+0"  -> '0.000'
	{"basx155", "0.000e+0", "0.000", false, 16, big.ToNearestAway},
	// basx156 toSci "0.000E-1"  -> '0.0000'
	{"basx156", "0.000E-1", "0.0000", false, 16, big.ToNearestAway},
	// basx157 toSci "4E+9"      -> '4E+9'
	{"basx157", "4E+9", "4E+9", false, 16, big.ToNearestAway},
	// basx158 toSci "44E+9"     -> '4.4E+10'
	{"basx158", "44E+9", "4.4E+10", false, 16, big.ToNearestAway},
	// basx159 toSci "0.73e-7"   -> '7.3E-8'
	{"basx159", "0.73e-7", "7.3E-8", false, 16, big.ToNearestAway},
	// basx160 toSci "00E+9"     -> '0E+9'
	{"basx160", "00E+9", "0E+9", false, 16, big.ToNearestAway},
	// basx161 toSci "00E-9"     -> '0E-9'
	{"basx161", "00E-9", "0E-9", false, 16, big.ToNearestAway},
	// basx162 toSci "10E+9"     -> '1.0E+10'
	{"basx162", "10E+9", "1.0E+10", false, 16, big.ToNearestAway},
	// basx163 toSci "10E+09"    -> '1.0E+10'
	{"basx163", "10E+09", "1.0E+10", false, 16, big.ToNearestAway},
	// basx164 toSci "10e+90"    -> '1.0E+91'
	{"basx164", "10e+90", "1.0E+91", false, 16, big.ToNearestAway},
	// basx165 toSci "10E+009"   -> '1.0E+10'
	{"basx165", "10E+009", "1.0E+10", false, 16, big.ToNearestAway},
	// basx166 toSci "100e+9"    -> '1.00E+11'
	{"basx166", "100e+9", "1.00E+11", false, 16, big.ToNearestAway},
	// basx167 toSci "100e+09"   -> '1.00E+11'
	{"basx167", "100e+09", "1.00E+11", false, 16, big.ToNearestAway},
	// basx168 toSci "100E+90"   -> '1.00E+92'
	{"basx168", "100E+90", "1.00E+92", false, 16, big.ToNearestAway},
	// basx169 toSci "100e+009"  -> '1.00E+11'
	{"basx169", "100e+009", "1.00E+11", false, 16, big.ToNearestAway},
	// basx170 toSci "1.265"     -> '1.265'
	{"basx170", "1.265", "1.265", false, 16, big.ToNearestAway},
	// basx171 toSci "1.265E-20" -> '1.265E-20'
	{"basx171", "1.265E-20", "1.265E-20", false, 16, big.ToNearestAway},
	// basx172 toSci "1.265E-8"  -> '1.265E-8'
	{"basx172", "1.265E-8", "1.265E-8", false, 16, big.ToNearestAway},
	// basx173 toSci "1.265E-4"  -> '0.0001265'
	{"basx173", "1.265E-4", "0.0001265", false, 16, big.ToNearestAway},
	// basx174 toSci "1.265E-3"  -> '0.001265'
	{"basx174", "1.265E-3", "0.001265", false, 16, big.ToNearestAway},
	// basx175 toSci "1.265E-2"  -> '0.01265'
	{"basx175", "1.265E-2", "0.01265", false, 16, big.ToNearestAway},
	// basx176 toSci "1.265E-1"  -> '0.1265'
	{"basx176", "1.265E-1", "0.1265", false, 16, big.ToNearestAway},
	// basx177 toSci "1.265E-0"  -> '1.265'
	{"basx177", "1.265E-0", "1.265", false, 16, big.ToNearestAway},
	// basx178 toSci "1.265E+1"  -> '12.65'
	{"basx178", "1.265E+1", "12.65", false, 16, big.ToNearestAway},
	// basx179 toSci "1.265E+2"  -> '126.5'
	{"basx179", "1.265E+2", "126.5", false, 16, big.ToNearestAway},
	// basx180 toSci "1.265E+3"  -> '1265'
	{"basx180", "1.265E+3", "1265", false, 16, big.ToNearestAway},
	// basx181 toSci "1.265E+4"  -> '1.265E+4'
	{"basx181", "1.265E+4", "1.265E+4", false, 16, big.ToNearestAway},
	// basx182 toSci "1.265E+8"  -> '1.265E+8'
	{"basx182", "1.265E+8", "1.265E+8", false, 16, big.ToNearestAway},
	// basx183 toSci "1.265E+20" -> '1.265E+20'
	{"basx183", "1.265E+20", "1.265E+20", false, 16, big.ToNearestAway},
	// basx190 toSci "12.65"     -> '12.65'
	{"basx190", "12.65", "12.65", false, 16, big.ToNearestAway},
	// basx191 toSci "12.65E-20" -> '1.265E-19'
	{"basx191", "12.65E-20", "1.265E-19", false, 16, big.ToNearestAway},
	// basx192 toSci "12.65E-8"  -> '1.265E-7'
	{"basx192", "12.65E-8", "1.265E-7", false, 16, big.ToNearestAway},
	// basx193 toSci "12.65E-4"  -> '0.001265'
	{"basx193", "12.65E-4", "0.001265", false, 16, big.ToNearestAway},
	// basx194 toSci "12.65E-3"  -> '0.01265'
	{"basx194", "12.65E-3", "0.01265", false, 16, big.ToNearestAway},
	// basx195 toSci "12.65E-2"  -> '0.1265'
	{"basx195", "12.65E-2", "0.1265", false, 16, big.ToNearestAway},
	// basx196 toSci "12.65E-1"  -> '1.265'
	{"basx196", "12.65E-1", "1.265", false, 16, big.ToNearestAway},
	// basx197 toSci "12.65E-0"  -> '12.65'
	{"basx197", "12.65E-0", "12.65", false, 16, big.ToNearestAway},
	// basx198 toSci "12.65E+1"  -> '126.5'
	{"basx198", "12.65E+1", "126.5", false, 16, big.ToNearestAway},
	// basx199 toSci "12.65E+2"  -> '1265'
	{"basx199", "12.65E+2", "1265", false, 16, big.ToNearestAway},
	// basx200 toSci "12.65E+3"  -> '1.265E+4'
	{"basx200", "12.65E+3", "1.265E+4", false, 16, big.ToNearestAway},
	// basx201 toSci "12.65E+4"  -> '1.265E+5'
	{"basx201", "12.65E+4", "1.265E+5", false, 16, big.ToNearestAway},
	// basx202 toSci "12.65E+8"  -> '1.265E+9'
	{"basx202", "12.65E+8", "1.265E+9", false, 16, big.ToNearestAway},
	// basx203 toSci "12.65E+20" -> '1.265E+21'
	{"basx203", "12.65E+20", "1.265E+21", false, 16, big.ToNearestAway},
	// basx210 toSci "126.5"     -> '126.5'
	{"basx210", "126.5", "126.5", false, 16, big.ToNearestAway},
	// basx211 toSci "126.5E-20" -> '1.265E-18'
	{"basx211", "126.5E-20", "1.265E-18", false, 16, big.ToNearestAway},
	// basx212 toSci "126.5E-8"  -> '0.000001265'
	{"basx212", "126.5E-8", "0.000001265", false, 16, big.ToNearestAway},
	// basx213 toSci "126.5E-4"  -> '0.01265'
	{"basx213", "126.5E-4", "0.01265", false, 16, big.ToNearestAway},
	// basx214 toSci "126.5E-3"  -> '0.1265'
	{"basx214", "126.5E-3", "0.1265", false, 16, big.ToNearestAway},
	// basx215 toSci "126.5E-2"  -> '1.265'
	{"basx215", "126.5E-2", "1.265", false, 16, big.ToNearestAway},
	// basx216 toSci "126.5E-1"  -> '12.65'
	{"basx216", "126.5E-1", "12.65", false, 16, big.ToNearestAway},
	// basx217 toSci "126.5E-0"  -> '126.5'
	{"basx217", "126.5E-0", "126.5", false, 16, big.ToNearestAway},
	// basx218 toSci "126.5E+1"  -> '1265'
	{"basx218", "126.5E+1", "1265", false, 16, big.ToNearestAway},
	// basx219 toSci "126.5E+2"  -> '1.265E+4'
	{"basx219", "126.5E+2", "1.265E+4", false, 16, big.ToNearestAway},
	// basx220 toSci "126.5E+3"  -> '1.265E+5'
	{"basx220", "126.5E+3", "1.265E+5", false, 16, big.ToNearestAway},
	// basx221 toSci "126.5E+4"  -> '1.265E+6'
	{"basx221", "126.5E+4", "1.265E+6", false, 16, big.ToNearestAway},
	// basx222 toSci "126.5E+8"  -> '1.265E+10'
	{"basx222", "126.5E+8", "1.265E+10", false, 16, big.ToNearestAway},
	// basx223 toSci "126.5E+20" -> '1.265E+22'
	{"basx223", "126.5E+20", "1.265E+22", false, 16, big.ToNearestAway},
	// basx230 toSci "1265"     -> '1265'
	{"basx230", "1265", "1265", false, 16, big.ToNearestAway},
	// basx231 toSci "1265E-20" -> '1.265E-17'
	{"basx231", "1265E-20", "1.265E-17", false, 16, big.ToNearestAway},
	// basx232 toSci "1265E-8"  -> '0.00001265'
	{"basx232", "1265E-8", "0.00001265", false, 16, big.ToNearestAway},
	// basx233 toSci "1265E-4"  -> '0.1265'
	{"basx233", "1265E-4", "0.1265", false, 16, big.ToNearestAway},
	// basx234 toSci "1265E-3"  -> '1.265'
	{"basx234", "1265E-3", "1.265", false, 16, big.ToNearestAway},
	// basx235 toSci "1265E-2"  -> '12.65'
	{"basx235", "1265E-2", "12.65", false, 16, big.ToNearestAway},
	// basx236 toSci "1265E-1"  -> '126.5'
	{"basx236", "1265E-1", "126.5", false, 16, big.ToNearestAway},
	// basx237 toSci "1265E-0"  -> '1265'
	{"basx237", "1265E-0", "1265", false, 16, big.ToNearestAway},
	// basx238 toSci "1265E+1"  -> '1.265E+4'
	{"basx238", "1265E+1", "1.265E+4", false, 16, big.ToNearestAway},
	// basx239 toSci "1265E+2"  -> '1.265E+5'
	{"basx239", "1265E+2", "1.265E+5", false, 16, big.ToNearestAway},
	// basx240 toSci "1265E+3"  -> '1.265E+6'
	{"basx240", "1265E+3", "1.265E+6", false, 16, big.ToNearestAway},
	// basx241 toSci "1265E+4"  -> '1.265E+7'
	{"basx241", "1265E+4", "1.265E+7", false, 16, big.ToNearestAway},
	// basx242 toSci "1265E+8"  -> '1.265E+11'
	{"basx242", "1265E+8", "1.265E+11", false, 16, big.ToNearestAway},
	// basx243 toSci "1265E+20" -> '1.265E+23'
	{"basx243", "1265E+20", "1.265E+23", false, 16, big.ToNearestAway},
	// basx250 toSci "0.1265"     -> '0.1265'
	{"basx250", "0.1265", "0.1265", false, 16, big.ToNearestAway},
	// basx251 toSci "0.1265E-20" -> '1.265E-21'
	{"basx251", "0.1265E-20", "1.265E-21", false, 16, big.ToNearestAway},
	// basx252 toSci "0.1265E-8"  -> '1.265E-9'
	{"basx252", "0.1265E-8", "1.265E-9", false, 16, big.ToNearestAway},
	// basx253 toSci "0.1265E-4"  -> '0.00001265'
	{"basx253", "0.1265E-4", "0.00001265", false, 16, big.ToNearestAway},
	// basx254 toSci "0.1265E-3"  -> '0.0001265'
	{"basx254", "0.1265E-3", "0.0001265", false, 16, big.ToNearestAway},
	// basx255 toSci "0.1265E-2"  -> '0.001265'
	{"basx255", "0.1265E-2", "0.001265", false, 16, big.ToNearestAway},
	// basx256 toSci "0.1265E-1"  -> '0.01265'
	{"basx256", "0.1265E-1", "0.01265", false, 16, big.ToNearestAway},
	// basx257 toSci "0.1265E-0"  -> '0.1265'
	{"basx257", "0.1265E-0", "0.1265", false, 16, big.ToNearestAway},
	// basx258 toSci "0.1265E+1"  -> '1.265'
	{"basx258", "0.1265E+1", "1.265", false, 16, big.ToNearestAway},
	// basx259 toSci "0.1265E+2"  -> '12.65'
	{"basx259", "0.1265E+2", "12.65", false, 16, big.ToNearestAway},
	// basx260 toSci "0.1265E+3"  -> '126.5'
	{"basx260", "0.1265E+3", "126.5", false, 16, big.ToNearestAway},
	// basx261 toSci "0.1265E+4"  -> '1265'
	{"basx261", "0.1265E+4", "1265", false, 16, big.ToNearestAway},
	// basx262 toSci "0.1265E+8"  -> '1.265E+7'
	{"basx262", "0.1265E+8", "1.265E+7", false, 16, big.ToNearestAway},
	// basx263 toSci "0.1265E+20" -> '1.265E+19'
	{"basx263", "0.1265E+20", "1.265E+19", false, 16, big.ToNearestAway},
	// some more negative zeros [systematic tests below]
	// basx290 toSci "-0.000E-1"  -> '-0.0000'
	{"basx290", "-0.000E-1", "-0.0000", false, 16, big.ToNearestAway},
	// basx291 toSci "-0.000E-2"  -> '-0.00000'
	{"basx291", "-0.000E-2", "-0.00000", false, 16, big.ToNearestAway},
	// basx292 toSci "-0.000E-3"  -> '-0.000000'
	{"basx292", "-0.000E-3", "-0.000000", false, 16, big.ToNearestAway},
	// basx293 toSci "-0.000E-4"  -> '-0E-7'
	{"basx293", "-0.000E-4", "-0E-7", false, 16, big.ToNearestAway},
	// basx294 toSci "-0.00E-2"   -> '-0.0000'
	{"basx294", "-0.00E-2", "-0.0000", false, 16, big.ToNearestAway},
	// basx295 toSci "-0.00E-3"   -> '-0.00000'
	{"basx295", "-0.00E-3", "-0.00000", false, 16, big.ToNearestAway},
	// basx296 toSci "-0.0E-2"    -> '-0.000'
	{"basx296", "-0.0E-2", "-0.000", false, 16, big.ToNearestAway},
	// basx297 toSci "-0.0E-3"    -> '-0.0000'
	{"basx297", "-0.0E-3", "-0.0000", false, 16, big.ToNearestAway},
	// basx298 toSci "-0E-2"      -> '-0.00'
	{"basx298", "-0E-2", "-0.00", false, 16, big.ToNearestAway},
	// basx299 toSci "-0E-3"      -> '-0.000'
	{"basx299", "-0E-3", "-0.000", false, 16, big.ToNearestAway},
	// Engineering notation tests
	// basx301  toSci 10e12  -> 1.0E+13
	{"basx301", "10e12", "1.0E+13", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx302  toEng 10e12  -> 10E+12
	// basx303  toSci 10e11  -> 1.0E+12
	{"basx303", "10e11", "1.0E+12", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx304  toEng 10e11  -> 1.0E+12
	// basx305  toSci 10e10  -> 1.0E+11
	{"basx305", "10e10", "1.0E+11", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx306  toEng 10e10  -> 100E+9
	// basx307  toSci 10e9   -> 1.0E+10
	{"basx307", "10e9", "1.0E+10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx308  toEng 10e9   -> 10E+9
	// basx309  toSci 10e8   -> 1.0E+9
	{"basx309", "10e8", "1.0E+9", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx310  toEng 10e8   -> 1.0E+9
	// basx311  toSci 10e7   -> 1.0E+8
	{"basx311", "10e7", "1.0E+8", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx312  toEng 10e7   -> 100E+6
	// basx313  toSci 10e6   -> 1.0E+7
	{"basx313", "10e6", "1.0E+7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx314  toEng 10e6   -> 10E+6
	// basx315  toSci 10e5   -> 1.0E+6
	{"basx315", "10e5", "1.0E+6", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx316  toEng 10e5   -> 1.0E+6
	// basx317  toSci 10e4   -> 1.0E+5
	{"basx317", "10e4", "1.0E+5", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx318  toEng 10e4   -> 100E+3
	// basx319  toSci 10e3   -> 1.0E+4
	{"basx319", "10e3", "1.0E+4", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx320  toEng 10e3   -> 10E+3
	// basx321  toSci 10e2   -> 1.0E+3
	{"basx321", "10e2", "1.0E+3", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx322  toEng 10e2   -> 1.0E+3
	// basx323  toSci 10e1   -> 1.0E+2
	{"basx323", "10e1", "1.0E+2", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx324  toEng 10e1   -> 100
	// basx325  toSci 10e0   -> 10
	{"basx325", "10e0", "10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx326  toEng 10e0   -> 10
	// basx327  toSci 10e-1  -> 1.0
	{"basx327", "10e-1", "1.0", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx328  toEng 10e-1  -> 1.0
	// basx329  toSci 10e-2  -> 0.10
	{"basx329", "10e-2", "0.10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx330  toEng 10e-2  -> 0.10
	// basx331  toSci 10e-3  -> 0.010
	{"basx331", "10e-3", "0.010", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx332  toEng 10e-3  -> 0.010
	// basx333  toSci 10e-4  -> 0.0010
	{"basx333", "10e-4", "0.0010", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx334  toEng 10e-4  -> 0.0010
	// basx335  toSci 10e-5  -> 0.00010
	{"basx335", "10e-5", "0.00010", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx336  toEng 10e-5  -> 0.00010
	// basx337  toSci 10e-6  -> 0.000010
	{"basx337", "10e-6", "0.000010", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx338  toEng 10e-6  -> 0.000010
	// basx339  toSci 10e-7  -> 0.0000010
	{"basx339", "10e-7", "0.0000010", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx340  toEng 10e-7  -> 0.0000010
	// basx341  toSci 10e-8  -> 1.0E-7
	{"basx341", "10e-8", "1.0E-7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx342  toEng 10e-8  -> 100E-9
	// basx343  toSci 10e-9  -> 1.0E-8
	{"basx343", "10e-9", "1.0E-8", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx344  toEng 10e-9  -> 10E-9
	// basx345  toSci 10e-10 -> 1.0E-9
	{"basx345", "10e-10", "1.0E-9", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx346  toEng 10e-10 -> 1.0E-9
	// basx347  toSci 10e-11 -> 1.0E-10
	{"basx347", "10e-11", "1.0E-10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx348  toEng 10e-11 -> 100E-12
	// basx349  toSci 10e-12 -> 1.0E-11
	{"basx349", "10e-12", "1.0E-11", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx350  toEng 10e-12 -> 10E-12
	// basx351  toSci 10e-13 -> 1.0E-12
	{"basx351", "10e-13", "1.0E-12", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx352  toEng 10e-13 -> 1.0E-12
	// basx361  toSci 7E12  -> 7E+12
	{"basx361", "7E12", "7E+12", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx362  toEng 7E12  -> 7E+12
	// basx363  toSci 7E11  -> 7E+11
	{"basx363", "7E11", "7E+11", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx364  toEng 7E11  -> 700E+9
	// basx365  toSci 7E10  -> 7E+10
	{"basx365", "7E10", "7E+10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx366  toEng 7E10  -> 70E+9
	// basx367  toSci 7E9   -> 7E+9
	{"basx367", "7E9", "7E+9", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx368  toEng 7E9   -> 7E+9
	// basx369  toSci 7E8   -> 7E+8
	{"basx369", "7E8", "7E+8", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx370  toEng 7E8   -> 700E+6
	// basx371  toSci 7E7   -> 7E+7
	{"basx371", "7E7", "7E+7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx372  toEng 7E7   -> 70E+6
	// basx373  toSci 7E6   -> 7E+6
	{"basx373", "7E6", "7E+6", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx374  toEng 7E6   -> 7E+6
	// basx375  toSci 7E5   -> 7E+5
	{"basx375", "7E5", "7E+5", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx376  toEng 7E5   -> 700E+3
	// basx377  toSci 7E4   -> 7E+4
	{"basx377", "7E4", "7E+4", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx378  toEng 7E4   -> 70E+3
	// basx379  toSci 7E3   -> 7E+3
	{"basx379", "7E3", "7E+3", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx380  toEng 7E3   -> 7E+3
	// basx381  toSci 7E2   -> 7E+2
	{"basx381", "7E2", "7E+2", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx382  toEng 7E2   -> 700
	// basx383  toSci 7E1   -> 7E+1
	{"basx383", "7E1", "7E+1", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx384  toEng 7E1   -> 70
	// basx385  toSci 7E0   -> 7
	{"basx385", "7E0", "7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx386  toEng 7E0   -> 7
	// basx387  toSci 7E-1  -> 0.7
	{"basx387", "7E-1", "0.7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx388  toEng 7E-1  -> 0.7
	// basx389  toSci 7E-2  -> 0.07
	{"basx389", "7E-2", "0.07", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx390  toEng 7E-2  -> 0.07
	// basx391  toSci 7E-3  -> 0.007
	{"basx391", "7E-3", "0.007", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx392  toEng 7E-3  -> 0.007
	// basx393  toSci 7E-4  -> 0.0007
	{"basx393", "7E-4", "0.0007", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx394  toEng 7E-4  -> 0.0007
	// basx395  toSci 7E-5  -> 0.00007
	{"basx395", "7E-5", "0.00007", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx396  toEng 7E-5  -> 0.00007
	// basx397  toSci 7E-6  -> 0.000007
	{"basx397", "7E-6", "0.000007", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx398  toEng 7E-6  -> 0.000007
	// basx399  toSci 7E-7  -> 7E-7
	{"basx399", "7E-7", "7E-7", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx400  toEng 7E-7  -> 700E-9
	// basx401  toSci 7E-8  -> 7E-8
	{"basx401", "7E-8", "7E-8", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx402  toEng 7E-8  -> 70E-9
	// basx403  toSci 7E-9  -> 7E-9
	{"basx403", "7E-9", "7E-9", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx404  toEng 7E-9  -> 7E-9
	// basx405  toSci 7E-10 -> 7E-10
	{"basx405", "7E-10", "7E-10", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx406  toEng 7E-10 -> 700E-12
	// basx407  toSci 7E-11 -> 7E-11
	{"basx407", "7E-11", "7E-11", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx408  toEng 7E-11 -> 70E-12
	// basx409  toSci 7E-12 -> 7E-12
	{"basx409", "7E-12", "7E-12", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx410  toEng 7E-12 -> 7E-12
	// basx411  toSci 7E-13 -> 7E-13
	{"basx411", "7E-13", "7E-13", false, 16, big.ToNearestAway},
	// SKIP (toeng not supported): basx412  toEng 7E-13 -> 700E-15
	// Exacts remain exact up to precision ..
	// precision: 9
	// basx420  toSci    100 -> 100
	{"basx420", "100", "100", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx421  toEng    100 -> 100
	// basx422  toSci   1000 -> 1000
	{"basx422", "1000", "1000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx423  toEng   1000 -> 1000
	// basx424  toSci  999.9 ->  999.9
	{"basx424", "999.9", "999.9", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx425  toEng  999.9 ->  999.9
	// basx426  toSci 1000.0 -> 1000.0
	{"basx426", "1000.0", "1000.0", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx427  toEng 1000.0 -> 1000.0
	// basx428  toSci 1000.1 -> 1000.1
	{"basx428", "1000.1", "1000.1", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx429  toEng 1000.1 -> 1000.1
	// basx430  toSci 10000 -> 10000
	{"basx430", "10000", "10000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx431  toEng 10000 -> 10000
	// basx432  toSci 100000 -> 100000
	{"basx432", "100000", "100000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx433  toEng 100000 -> 100000
	// basx434  toSci 1000000 -> 1000000
	{"basx434", "1000000", "1000000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx435  toEng 1000000 -> 1000000
	// basx436  toSci 10000000 -> 10000000
	{"basx436", "10000000", "10000000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx437  toEng 10000000 -> 10000000
	// basx438  toSci 100000000 -> 100000000
	{"basx438", "100000000", "100000000", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx439  toEng 100000000 -> 100000000
	// basx440  toSci 1000000000    -> 1.00000000E+9    Rounded
	{"basx440", "1000000000", "1.00000000E+9", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx441  toEng 1000000000    -> 1.00000000E+9    Rounded
	// basx442  toSci 1000000000    -> 1.00000000E+9    Rounded
	{"basx442", "1000000000", "1.00000000E+9", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx443  toEng 1000000000    -> 1.00000000E+9    Rounded
	// basx444  toSci 1000000003    -> 1.00000000E+9    Rounded Inexact
	{"basx444", "1000000003", "1.00000000E+9", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx445  toEng 1000000003    -> 1.00000000E+9    Rounded Inexact
	// basx446  toSci 1000000005    -> 1.00000001E+9    Rounded Inexact
	{"basx446", "1000000005", "1.00000001E+9", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx447  toEng 1000000005    -> 1.00000001E+9    Rounded Inexact
	// basx448  toSci 10000000050   -> 1.00000001E+10   Rounded Inexact
	{"basx448", "10000000050", "1.00000001E+10", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx449  toEng 10000000050   -> 10.0000001E+9    Rounded Inexact
	// basx450  toSci 1000000009    -> 1.00000001E+9    Rounded Inexact
	{"basx450", "1000000009", "1.00000001E+9", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx451  toEng 1000000009    -> 1.00000001E+9    Rounded Inexact
	// basx452  toSci 10000000000   -> 1.00000000E+10   Rounded
	{"basx452", "10000000000", "1.00000000E+10", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx453  toEng 10000000000   -> 10.0000000E+9    Rounded
	// basx454  toSci 10000000003   -> 1.00000000E+10   Rounded Inexact
	{"basx454", "10000000003", "1.00000000E+10", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx455  toEng 10000000003   -> 10.0000000E+9    Rounded Inexact
	// basx456  toSci 10000000005   -> 1.00000000E+10   Rounded Inexact
	{"basx456", "10000000005", "1.00000000E+10", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx457  toEng 10000000005   -> 10.0000000E+9    Rounded Inexact
	// basx458  toSci 10000000009   -> 1.00000000E+10   Rounded Inexact
	{"basx458", "10000000009", "1.00000000E+10", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx459  toEng 10000000009   -> 10.0000000E+9    Rounded Inexact
	// basx460  toSci 100000000000  -> 1.00000000E+11   Rounded
	{"basx460", "100000000000", "1.00000000E+11", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx461  toEng 100000000000  -> 100.000000E+9    Rounded
	// basx462  toSci 100000000300  -> 1.00000000E+11   Rounded Inexact
	{"basx462", "100000000300", "1.00000000E+11", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx463  toEng 100000000300  -> 100.000000E+9    Rounded Inexact
	// basx464  toSci 100000000500  -> 1.00000001E+11   Rounded Inexact
	{"basx464", "100000000500", "1.00000001E+11", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx465  toEng 100000000500  -> 100.000001E+9    Rounded Inexact
	// basx466  toSci 100000000900  -> 1.00000001E+11   Rounded Inexact
	{"basx466", "100000000900", "1.00000001E+11", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx467  toEng 100000000900  -> 100.000001E+9    Rounded Inexact
	// basx468  toSci 1000000000000 -> 1.00000000E+12   Rounded
	{"basx468", "1000000000000", "1.00000000E+12", false, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx469  toEng 1000000000000 -> 1.00000000E+12   Rounded
	// basx470  toSci 1000000003000 -> 1.00000000E+12   Rounded Inexact
	{"basx470", "1000000003000", "1.00000000E+12", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx471  toEng 1000000003000 -> 1.00000000E+12   Rounded Inexact
	// basx472  toSci 1000000005000 -> 1.00000001E+12   Rounded Inexact
	{"basx472", "1000000005000", "1.00000001E+12", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx473  toEng 1000000005000 -> 1.00000001E+12   Rounded Inexact
	// basx474  toSci 1000000009000 -> 1.00000001E+12   Rounded Inexact
	{"basx474", "1000000009000", "1.00000001E+12", true, 9, big.ToNearestAway},
	// SKIP (toeng not supported): basx475  toEng 1000000009000 -> 1.00000001E+12   Rounded Inexact
	// all-nines rounding
	// precision: 9
	// rounding: half_up
	// basx270  toSci 999999999          ->   999999999
	{"basx270", "999999999", "999999999", false, 9, big.ToNearestAway},
	// basx271  toSci 9999999990         ->   9.99999999E+9      Rounded
	{"basx271", "9999999990", "9.99999999E+9", false, 9, big.ToNearestAway},
	// basx272  toSci 9999999991         ->   9.99999999E+9      Rounded Inexact
	{"basx272", "9999999991", "9.99999999E+9", true, 9, big.ToNearestAway},
	// basx273  toSci 9999999992         ->   9.99999999E+9      Rounded Inexact
	{"basx273", "9999999992", "9.99999999E+9", true, 9, big.ToNearestAway},
	// basx274  toSci 9999999993         ->   9.99999999E+9      Rounded Inexact
	{"basx274", "9999999993", "9.99999999E+9", true, 9, big.ToNearestAway},
	// basx275  toSci 9999999994         ->   9.99999999E+9      Rounded Inexact
	{"basx275", "9999999994", "9.99999999E+9", true, 9, big.ToNearestAway},
	// basx276  toSci 9999999995         ->   1.00000000E+10     Rounded Inexact
	{"basx276", "9999999995", "1.00000000E+10", true, 9, big.ToNearestAway},
	// basx277  toSci 9999999996         ->   1.00000000E+10     Rounded Inexact
	{"basx277", "9999999996", "1.00000000E+10", true, 9, big.ToNearestAway},
	// basx278  toSci 9999999997         ->   1.00000000E+10     Rounded Inexact
	{"basx278", "9999999997", "1.00000000E+10", true, 9, big.ToNearestAway},
	// basx279  toSci 9999999998         ->   1.00000000E+10     Rounded Inexact
	{"basx279", "9999999998", "1.00000000E+10", true, 9, big.ToNearestAway},
	// basx280  toSci 9999999999         ->   1.00000000E+10     Rounded Inexact
	{"basx280", "9999999999", "1.00000000E+10", true, 9, big.ToNearestAway},
	// basx281  toSci 9999999999999999   ->   1.00000000E+16     Rounded Inexact
	{"basx281", "9999999999999999", "1.00000000E+16", true, 9, big.ToNearestAway},
	// check rounding modes heeded
	// precision: 5
	// rounding: ceiling
	// bsrx401  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx401", "1.23450", "1.2345", false, 5, big.ToPositiveInf},
	// bsrx402  toSci  1.234549   ->  1.2346  Rounded Inexact
	{"bsrx402", "1.234549", "1.2346", true, 5, big.ToPositiveInf},
	// bsrx403  toSci  1.234550   ->  1.2346  Rounded Inexact
	{"bsrx403", "1.234550", "1.2346", true, 5, big.ToPositiveInf},
	// bsrx404  toSci  1.234551   ->  1.2346  Rounded Inexact
	{"bsrx404", "1.234551", "1.2346", true, 5, big.ToPositiveInf},
	// rounding: up
	// bsrx405  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx405", "1.23450", "1.2345", false, 5, big.AwayFromZero},
	// bsrx406  toSci  1.234549   ->  1.2346  Rounded Inexact
	{"bsrx406", "1.234549", "1.2346", true, 5, big.AwayFromZero},
	// bsrx407  toSci  1.234550   ->  1.2346  Rounded Inexact
	{"bsrx407", "1.234550", "1.2346", true, 5, big.AwayFromZero},
	// bsrx408  toSci  1.234551   ->  1.2346  Rounded Inexact
	{"bsrx408", "1.234551", "1.2346", true, 5, big.AwayFromZero},
	// rounding: floor
	// bsrx410  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx410", "1.23450", "1.2345", false, 5, big.ToNegativeInf},
	// bsrx411  toSci  1.234549   ->  1.2345  Rounded Inexact
	{"bsrx411", "1.234549", "1.2345", true, 5, big.ToNegativeInf},
	// bsrx412  toSci  1.234550   ->  1.2345  Rounded Inexact
	{"bsrx412", "1.234550", "1.2345", true, 5, big.ToNegativeInf},
	// bsrx413  toSci  1.234551   ->  1.2345  Rounded Inexact
	{"bsrx413", "1.234551", "1.2345", true, 5, big.ToNegativeInf},
	// rounding: half_down
	// SKIP (unsupported rounding): bsrx415  toSci  1.23450    ->  1.2345  Rounded
	// SKIP (unsupported rounding): bsrx416  toSci  1.234549   ->  1.2345  Rounded Inexact
	// SKIP (unsupported rounding): bsrx417  toSci  1.234550   ->  1.2345  Rounded Inexact
	// SKIP (unsupported rounding): bsrx418  toSci  1.234650   ->  1.2346  Rounded Inexact
	// SKIP (unsupported rounding): bsrx419  toSci  1.234551   ->  1.2346  Rounded Inexact
	// rounding: half_even
	// bsrx421  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx421", "1.23450", "1.2345", false, 5, big.ToNearestEven},
	// bsrx422  toSci  1.234549   ->  1.2345  Rounded Inexact
	{"bsrx422", "1.234549", "1.2345", true, 5, big.ToNearestEven},
	// bsrx423  toSci  1.234550   ->  1.2346  Rounded Inexact
	{"bsrx423", "1.234550", "1.2346", true, 5, big.ToNearestEven},
	// bsrx424  toSci  1.234650   ->  1.2346  Rounded Inexact
	{"bsrx424", "1.234650", "1.2346", true, 5, big.ToNearestEven},
	// bsrx425  toSci  1.234551   ->  1.2346  Rounded Inexact
	{"bsrx425", "1.234551", "1.2346", true, 5, big.ToNearestEven},
	// rounding: down
	// bsrx426  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx426", "1.23450", "1.2345", false, 5, big.ToZero},
	// bsrx427  toSci  1.234549   ->  1.2345  Rounded Inexact
	{"bsrx427", "1.234549", "1.2345", true, 5, big.ToZero},
	// bsrx428  toSci  1.234550   ->  1.2345  Rounded Inexact
	{"bsrx428", "1.234550", "1.2345", true, 5, big.ToZero},
	// bsrx429  toSci  1.234551   ->  1.2345  Rounded Inexact
	{"bsrx429", "1.234551", "1.2345", true, 5, big.ToZero},
	// rounding: half_up
	// bsrx431  toSci  1.23450    ->  1.2345  Rounded
	{"bsrx431", "1.23450", "1.2345", false, 5, big.ToNearestAway},
	// bsrx432  toSci  1.234549   ->  1.2345  Rounded Inexact
	{"bsrx432", "1.234549", "1.2345", true, 5, big.ToNearestAway},
	// bsrx433  toSci  1.234550   ->  1.2346  Rounded Inexact
	{"bsrx433", "1.234550", "1.2346", true, 5, big.ToNearestAway},
	// bsrx434  toSci  1.234650   ->  1.2347  Rounded Inexact
	{"bsrx434", "1.234650", "1.2347", true, 5, big.ToNearestAway},
	// bsrx435  toSci  1.234551   ->  1.2346  Rounded Inexact
	{"bsrx435", "1.234551", "1.2346", true, 5, big.ToNearestAway},
	// negatives
	// rounding: ceiling
	// bsrx501  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx501", "-1.23450", "-1.2345", false, 5, big.ToPositiveInf},
	// bsrx502  toSci -1.234549   -> -1.2345  Rounded Inexact
	{"bsrx502", "-1.234549", "-1.2345", true, 5, big.ToPositiveInf},
	// bsrx503  toSci -1.234550   -> -1.2345  Rounded Inexact
	{"bsrx503", "-1.234550", "-1.2345", true, 5, big.ToPositiveInf},
	// bsrx504  toSci -1.234551   -> -1.2345  Rounded Inexact
	{"bsrx504", "-1.234551", "-1.2345", true, 5, big.ToPositiveInf},
	// rounding: up
	// bsrx505  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx505", "-1.23450", "-1.2345", false, 5, big.AwayFromZero},
	// bsrx506  toSci -1.234549   -> -1.2346  Rounded Inexact
	{"bsrx506", "-1.234549", "-1.2346", true, 5, big.AwayFromZero},
	// bsrx507  toSci -1.234550   -> -1.2346  Rounded Inexact
	{"bsrx507", "-1.234550", "-1.2346", true, 5, big.AwayFromZero},
	// bsrx508  toSci -1.234551   -> -1.2346  Rounded Inexact
	{"bsrx508", "-1.234551", "-1.2346", true, 5, big.AwayFromZero},
	// rounding: floor
	// bsrx510  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx510", "-1.23450", "-1.2345", false, 5, big.ToNegativeInf},
	// bsrx511  toSci -1.234549   -> -1.2346  Rounded Inexact
	{"bsrx511", "-1.234549", "-1.2346", true, 5, big.ToNegativeInf},
	// bsrx512  toSci -1.234550   -> -1.2346  Rounded Inexact
	{"bsrx512", "-1.234550", "-1.2346", true, 5, big.ToNegativeInf},
	// bsrx513  toSci -1.234551   -> -1.2346  Rounded Inexact
	{"bsrx513", "-1.234551", "-1.2346", true, 5, big.ToNegativeInf},
	// rounding: half_down
	// SKIP (unsupported rounding): bsrx515  toSci -1.23450    -> -1.2345  Rounded
	// SKIP (unsupported rounding): bsrx516  toSci -1.234549   -> -1.2345  Rounded Inexact
	// SKIP (unsupported rounding): bsrx517  toSci -1.234550   -> -1.2345  Rounded Inexact
	// SKIP (unsupported rounding): bsrx518  toSci -1.234650   -> -1.2346  Rounded Inexact
	// SKIP (unsupported rounding): bsrx519  toSci -1.234551   -> -1.2346  Rounded Inexact
	// rounding: half_even
	// bsrx521  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx521", "-1.23450", "-1.2345", false, 5, big.ToNearestEven},
	// bsrx522  toSci -1.234549   -> -1.2345  Rounded Inexact
	{"bsrx522", "-1.234549", "-1.2345", true, 5, big.ToNearestEven},
	// bsrx523  toSci -1.234550   -> -1.2346  Rounded Inexact
	{"bsrx523", "-1.234550", "-1.2346", true, 5, big.ToNearestEven},
	// bsrx524  toSci -1.234650   -> -1.2346  Rounded Inexact
	{"bsrx524", "-1.234650", "-1.2346", true, 5, big.ToNearestEven},
	// bsrx525  toSci -1.234551   -> -1.2346  Rounded Inexact
	{"bsrx525", "-1.234551", "-1.2346", true, 5, big.ToNearestEven},
	// rounding: down
	// bsrx526  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx526", "-1.23450", "-1.2345", false, 5, big.ToZero},
	// bsrx527  toSci -1.234549   -> -1.2345  Rounded Inexact
	{"bsrx527", "-1.234549", "-1.2345", true, 5, big.ToZero},
	// bsrx528  toSci -1.234550   -> -1.2345  Rounded Inexact
	{"bsrx528", "-1.234550", "-1.2345", true, 5, big.ToZero},
	// bsrx529  toSci -1.234551   -> -1.2345  Rounded Inexact
	{"bsrx529", "-1.234551", "-1.2345", true, 5, big.ToZero},
	// rounding: half_up
	// bsrx531  toSci -1.23450    -> -1.2345  Rounded
	{"bsrx531", "-1.23450", "-1.2345", false, 5, big.ToNearestAway},
	// bsrx532  toSci -1.234549   -> -1.2345  Rounded Inexact
	{"bsrx532", "-1.234549", "-1.2345", true, 5, big.ToNearestAway},
	// bsrx533  toSci -1.234550   -> -1.2346  Rounded Inexact
	{"bsrx533", "-1.234550", "-1.2346", true, 5, big.ToNearestAway},
	// bsrx534  toSci -1.234650   -> -1.2347  Rounded Inexact
	{"bsrx534", "-1.234650", "-1.2347", true, 5, big.ToNearestAway},
	// bsrx535  toSci -1.234551   -> -1.2346  Rounded Inexact
	{"bsrx535", "-1.234551", "-1.2346", true, 5, big.ToNearestAway},
	// a few larger exponents
	// maxexponent: 999999999
	// minexponent: -999999999
	// basx480 toSci "0.09e999"  -> '9E+997'
	{"basx480", "0.09e999", "9E+997", false, 5, big.ToNearestAway},
	// basx481 toSci "0.9e999"   -> '9E+998'
	{"basx481", "0.9e999", "9E+998", false, 5, big.ToNearestAway},
	// basx482 toSci "9e999"     -> '9E+999'
	{"basx482", "9e999", "9E+999", false, 5, big.ToNearestAway},
	// basx483 toSci "9.9e999"   -> '9.9E+999'
	{"basx483", "9.9e999", "9.9E+999", false, 5, big.ToNearestAway},
	// basx484 toSci "9.99e999"  -> '9.99E+999'
	{"basx484", "9.99e999", "9.99E+999", false, 5, big.ToNearestAway},
	// basx485 toSci "9.99e-999" -> '9.99E-999'
	{"basx485", "9.99e-999", "9.99E-999", false, 5, big.ToNearestAway},
	// basx486 toSci "9.9e-999"  -> '9.9E-999'
	{"basx486", "9.9e-999", "9.9E-999", false, 5, big.ToNearestAway},
	// basx487 toSci "9e-999"    -> '9E-999'
	{"basx487", "9e-999", "9E-999", false, 5, big.ToNearestAway},
	// basx489 toSci "99e-999"   -> '9.9E-998'
	{"basx489", "99e-999", "9.9E-998", false, 5, big.ToNearestAway},
	// basx490 toSci "999e-999"  -> '9.99E-997'
	{"basx490", "999e-999", "9.99E-997", false, 5, big.ToNearestAway},
	// basx491 toSci '0.9e-998'  -> '9E-999'
	{"basx491", "0.9e-998", "9E-999", false, 5, big.ToNearestAway},
	// basx492 toSci '0.09e-997' -> '9E-999'
	{"basx492", "0.09e-997", "9E-999", false, 5, big.ToNearestAway},
	// basx493 toSci '0.1e1000'  -> '1E+999'
	{"basx493", "0.1e1000", "1E+999", false, 5, big.ToNearestAway},
	// basx494 toSci '10e-1000'  -> '1.0E-999'
	{"basx494", "10e-1000", "1.0E-999", false, 5, big.ToNearestAway},
	// rounding: half_up
	// precision: 9
	// The 'baddies' tests from DiagBigDecimal, plus some new ones
	// basx500 toSci '1..2'            -> NaN Conversion_syntax
	{"basx500", "1..2", "", false, 9, big.ToNearestAway},
	// basx501 toSci '.'               -> NaN Conversion_syntax
	{"basx501", ".", "", false, 9, big.ToNearestAway},
	// basx502 toSci '..'              -> NaN Conversion_syntax
	{"basx502", "..", "", false, 9, big.ToNearestAway},
	// basx503 toSci '++1'             -> NaN Conversion_syntax
	{"basx503", "++1", "", false, 9, big.ToNearestAway},
	// basx504 toSci '--1'             -> NaN Conversion_syntax
	{"basx504", "--1", "", false, 9, big.ToNearestAway},
	// basx505 toSci '-+1'             -> NaN Conversion_syntax
	{"basx505", "-+1", "", false, 9, big.ToNearestAway},
	// basx506 toSci '+-1'             -> NaN Conversion_syntax
	{"basx506", "+-1", "", false, 9, big.ToNearestAway},
	// basx507 toSci '12e'             -> NaN Conversion_syntax
	{"basx507", "12e", "", false, 9, big.ToNearestAway},
	// basx508 toSci '12e++'           -> NaN Conversion_syntax
	{"basx508", "12e++", "", false, 9, big.ToNearestAway},
	// basx509 toSci '12f4'            -> NaN Conversion_syntax
	{"basx509", "12f4", "", false, 9, big.ToNearestAway},
	// basx510 toSci ' +1'             -> NaN Conversion_syntax
	{"basx510", "", "", false, 9, big.ToNearestAway},
	// basx511 toSci '+ 1'             -> NaN Conversion_syntax
	{"basx511", "+", "", false, 9, big.ToNearestAway},
	// SKIP (TODO (nyi)): basx512 toSci '12 '             -> NaN Conversion_syntax
	// basx513 toSci ' + 1'            -> NaN Conversion_syntax
	{"basx513", "", "", false, 9, big.ToNearestAway},
	// basx514 toSci ' - 1 '           -> NaN Conversion_syntax
	{"basx514", "", "", false, 9, big.ToNearestAway},
	// basx515 toSci 'x'               -> NaN Conversion_syntax
	{"basx515", "x", "", false, 9, big.ToNearestAway},
	// basx516 toSci '-1-'             -> NaN Conversion_syntax
	{"basx516", "-1-", "", false, 9, big.ToNearestAway},
	// basx517 toSci '12-'             -> NaN Conversion_syntax
	{"basx517", "12-", "", false, 9, big.ToNearestAway},
	// basx518 toSci '3+'              -> NaN Conversion_syntax
	{"basx518", "3+", "", false, 9, big.ToNearestAway},
	// basx519 toSci ''                -> NaN Conversion_syntax
	{"basx519", "", "", false, 9, big.ToNearestAway},
	// basx520 toSci '1e-'             -> NaN Conversion_syntax
	{"basx520", "1e-", "", false, 9, big.ToNearestAway},
	// basx521 toSci '7e99999a'        -> NaN Conversion_syntax
	{"basx521", "7e99999a", "", false, 9, big.ToNearestAway},
	// basx522 toSci '7e123567890x'    -> NaN Conversion_syntax
	{"basx522", "7e123567890x", "", false, 9, big.ToNearestAway},
	// basx523 toSci '7e12356789012x'  -> NaN Conversion_syntax
	{"basx523", "7e12356789012x", "", false, 9, big.ToNearestAway},
	// basx524 toSci ''                -> NaN Conversion_syntax
	{"basx524", "", "", false, 9, big.ToNearestAway},
	// basx525 toSci 'e100'            -> NaN Conversion_syntax
	{"basx525", "e100", "", false, 9, big.ToNearestAway},
	// basx526 toSci '\u0e5a'          -> NaN Conversion_syntax
	{"basx526", "\u0e5a", "", false, 9, big.ToNearestAway},
	// basx527 toSci '\u0b65'          -> NaN Conversion_syntax
	{"basx527", "\u0b65", "", false, 9, big.ToNearestAway},
	// basx528 toSci '123,65'          -> NaN Conversion_syntax
	{"basx528", "123,65", "", false, 9, big.ToNearestAway},
	// basx529 toSci '1.34.5'          -> NaN Conversion_syntax
	{"basx529", "1.34.5", "", false, 9, big.ToNearestAway},
	// basx530 toSci '.123.5'          -> NaN Conversion_syntax
	{"basx530", ".123.5", "", false, 9, big.ToNearestAway},
	// basx531 toSci '01.35.'          -> NaN Conversion_syntax
	{"basx531", "01.35.", "", false, 9, big.ToNearestAway},
	// basx532 toSci '01.35-'          -> NaN Conversion_syntax
	{"basx532", "01.35-", "", false, 9, big.ToNearestAway},
	// basx533 toSci '0000..'          -> NaN Conversion_syntax
	{"basx533", "0000..", "", false, 9, big.ToNearestAway},
	// basx534 toSci '.0000.'          -> NaN Conversion_syntax
	{"basx534", ".0000.", "", false, 9, big.ToNearestAway},
	// basx535 toSci '00..00'          -> NaN Conversion_syntax
	{"basx535", "00..00", "", false, 9, big.ToNearestAway},
	// basx536 toSci '111e*123'        -> NaN Conversion_syntax
	{"basx536", "111e*123", "", false, 9, big.ToNearestAway},
	// basx537 toSci '111e123-'        -> NaN Conversion_syntax
	{"basx537", "111e123-", "", false, 9, big.ToNearestAway},
	// basx538 toSci '111e+12+'        -> NaN Conversion_syntax
	{"basx538", "111e+12+", "", false, 9, big.ToNearestAway},
	// basx539 toSci '111e1-3-'        -> NaN Conversion_syntax
	{"basx539", "111e1-3-", "", false, 9, big.ToNearestAway},
	// basx540 toSci '111e1*23'        -> NaN Conversion_syntax
	{"basx540", "111e1*23", "", false, 9, big.ToNearestAway},
	// basx541 toSci '111e1e+3'        -> NaN Conversion_syntax
	{"basx541", "111e1e+3", "", false, 9, big.ToNearestAway},
	// basx542 toSci '1e1.0'           -> NaN Conversion_syntax
	{"basx542", "1e1.0", "", false, 9, big.ToNearestAway},
	// basx543 toSci '1e123e'          -> NaN Conversion_syntax
	{"basx543", "1e123e", "", false, 9, big.ToNearestAway},
	// basx544 toSci 'ten'             -> NaN Conversion_syntax
	{"basx544", "ten", "", false, 9, big.ToNearestAway},
	// basx545 toSci 'ONE'             -> NaN Conversion_syntax
	{"basx545", "ONE", "", false, 9, big.ToNearestAway},
	// basx546 toSci '1e.1'            -> NaN Conversion_syntax
	{"basx546", "1e.1", "", false, 9, big.ToNearestAway},
	// basx547 toSci '1e1.'            -> NaN Conversion_syntax
	{"basx547", "1e1.", "", false, 9, big.ToNearestAway},
	// basx548 toSci '1ee'             -> NaN Conversion_syntax
	{"basx548", "1ee", "", false, 9, big.ToNearestAway},
	// basx549 toSci 'e+1'             -> NaN Conversion_syntax
	{"basx549", "e+1", "", false, 9, big.ToNearestAway},
	// basx550 toSci '1.23.4'          -> NaN Conversion_syntax
	{"basx550", "1.23.4", "", false, 9, big.ToNearestAway},
	// basx551 toSci '1.2.1'           -> NaN Conversion_syntax
	{"basx551", "1.2.1", "", false, 9, big.ToNearestAway},
	// basx552 toSci '1E+1.2'          -> NaN Conversion_syntax
	{"basx552", "1E+1.2", "", false, 9, big.ToNearestAway},
	// basx553 toSci '1E+1.2.3'        -> NaN Conversion_syntax
	{"basx553", "1E+1.2.3", "", false, 9, big.ToNearestAway},
	// basx554 toSci '1E++1'           -> NaN Conversion_syntax
	{"basx554", "1E++1", "", false, 9, big.ToNearestAway},
	// basx555 toSci '1E--1'           -> NaN Conversion_syntax
	{"basx555", "1E--1", "", false, 9, big.ToNearestAway},
	// basx556 toSci '1E+-1'           -> NaN Conversion_syntax
	{"basx556", "1E+-1", "", false, 9, big.ToNearestAway},
	// basx557 toSci '1E-+1'           -> NaN Conversion_syntax
	{"basx557", "1E-+1", "", false, 9, big.ToNearestAway},
	// basx558 toSci '1E''1'           -> NaN Conversion_syntax
	{"basx558", "1E''1", "", false, 9, big.ToNearestAway},
	// SKIP (TODO (nyi)): basx559 toSci "1E""1"           -> NaN Conversion_syntax
	// basx560 toSci "1E"""""          -> NaN Conversion_syntax
	{"basx560", "1E", "", false, 9, big.ToNearestAway},
	// Near-specials
	// basx561 toSci "qNaN"            -> NaN Conversion_syntax
	{"basx561", "qNaN", "", false, 9, big.ToNearestAway},
	// basx562 toSci "NaNq"            -> NaN Conversion_syntax
	{"basx562", "NaNq", "", false, 9, big.ToNearestAway},
	// basx563 toSci "NaNs"            -> NaN Conversion_syntax
	{"basx563", "NaNs", "", false, 9, big.ToNearestAway},
	// SKIP (infinity test): basx564 toSci "Infi"            -> NaN Conversion_syntax
	// SKIP (infinity test): basx565 toSci "Infin"           -> NaN Conversion_syntax
	// SKIP (infinity test): basx566 toSci "Infini"          -> NaN Conversion_syntax
	// SKIP (infinity test): basx567 toSci "Infinit"         -> NaN Conversion_syntax
	// SKIP (infinity test): basx568 toSci "-Infinit"        -> NaN Conversion_syntax
	// SKIP (infinity test): basx569 toSci "0Inf"            -> NaN Conversion_syntax
	// SKIP (infinity test): basx570 toSci "9Inf"            -> NaN Conversion_syntax
	// SKIP (infinity test): basx571 toSci "-0Inf"           -> NaN Conversion_syntax
	// SKIP (infinity test): basx572 toSci "-9Inf"           -> NaN Conversion_syntax
	// basx573 toSci "-sNa"            -> NaN Conversion_syntax
	{"basx573", "-sNa", "", false, 9, big.ToNearestAway},
	// basx574 toSci "xNaN"            -> NaN Conversion_syntax
	{"basx574", "xNaN", "", false, 9, big.ToNearestAway},
	// basx575 toSci "0sNaN"           -> NaN Conversion_syntax
	{"basx575", "0sNaN", "", false, 9, big.ToNearestAway},
	// some baddies with dots and Es and dots and specials
	// basx576 toSci  'e+1'            ->  NaN Conversion_syntax
	{"basx576", "e+1", "", false, 9, big.ToNearestAway},
	// basx577 toSci  '.e+1'           ->  NaN Conversion_syntax
	{"basx577", ".e+1", "", false, 9, big.ToNearestAway},
	// basx578 toSci  '+.e+1'          ->  NaN Conversion_syntax
	{"basx578", "+.e+1", "", false, 9, big.ToNearestAway},
	// basx579 toSci  '-.e+'           ->  NaN Conversion_syntax
	{"basx579", "-.e+", "", false, 9, big.ToNearestAway},
	// basx580 toSci  '-.e'            ->  NaN Conversion_syntax
	{"basx580", "-.e", "", false, 9, big.ToNearestAway},
	// basx581 toSci  'E+1'            ->  NaN Conversion_syntax
	{"basx581", "E+1", "", false, 9, big.ToNearestAway},
	// basx582 toSci  '.E+1'           ->  NaN Conversion_syntax
	{"basx582", ".E+1", "", false, 9, big.ToNearestAway},
	// basx583 toSci  '+.E+1'          ->  NaN Conversion_syntax
	{"basx583", "+.E+1", "", false, 9, big.ToNearestAway},
	// basx584 toSci  '-.E+'           ->  NaN Conversion_syntax
	{"basx584", "-.E+", "", false, 9, big.ToNearestAway},
	// basx585 toSci  '-.E'            ->  NaN Conversion_syntax
	{"basx585", "-.E", "", false, 9, big.ToNearestAway},
	// basx586 toSci  '.NaN'           ->  NaN Conversion_syntax
	{"basx586", ".NaN", "", false, 9, big.ToNearestAway},
	// basx587 toSci  '-.NaN'          ->  NaN Conversion_syntax
	{"basx587", "-.NaN", "", false, 9, big.ToNearestAway},
	// basx588 toSci  '+.sNaN'         ->  NaN Conversion_syntax
	{"basx588", "+.sNaN", "", false, 9, big.ToNearestAway},
	// SKIP (infinity test): basx589 toSci  '+.Inf'          ->  NaN Conversion_syntax
	// SKIP (infinity test): basx590 toSci  '.Infinity'      ->  NaN Conversion_syntax
	// Zeros
	// basx601 toSci 0.000000000       -> 0E-9
	{"basx601", "0.000000000", "0E-9", false, 9, big.ToNearestAway},
	// basx602 toSci 0.00000000        -> 0E-8
	{"basx602", "0.00000000", "0E-8", false, 9, big.ToNearestAway},
	// basx603 toSci 0.0000000         -> 0E-7
	{"basx603", "0.0000000", "0E-7", false, 9, big.ToNearestAway},
	// basx604 toSci 0.000000          -> 0.000000
	{"basx604", "0.000000", "0.000000", false, 9, big.ToNearestAway},
	// basx605 toSci 0.00000           -> 0.00000
	{"basx605", "0.00000", "0.00000", false, 9, big.ToNearestAway},
	// basx606 toSci 0.0000            -> 0.0000
	{"basx606", "0.0000", "0.0000", false, 9, big.ToNearestAway},
	// basx607 toSci 0.000             -> 0.000
	{"basx607", "0.000", "0.000", false, 9, big.ToNearestAway},
	// basx608 toSci 0.00              -> 0.00
	{"basx608", "0.00", "0.00", false, 9, big.ToNearestAway},
	// basx609 toSci 0.0               -> 0.0
	{"basx609", "0.0", "0.0", false, 9, big.ToNearestAway},
	// basx610 toSci  .0               -> 0.0
	{"basx610", ".0", "0.0", false, 9, big.ToNearestAway},
	// basx611 toSci 0.                -> 0
	{"basx611", "0.", "0", false, 9, big.ToNearestAway},
	// basx612 toSci -.0               -> -0.0
	{"basx612", "-.0", "-0.0", false, 9, big.ToNearestAway},
	// basx613 toSci -0.               -> -0
	{"basx613", "-0.", "-0", false, 9, big.ToNearestAway},
	// basx614 toSci -0.0              -> -0.0
	{"basx614", "-0.0", "-0.0", false, 9, big.ToNearestAway},
	// basx615 toSci -0.00             -> -0.00
	{"basx615", "-0.00", "-0.00", false, 9, big.ToNearestAway},
	// basx616 toSci -0.000            -> -0.000
	{"basx616", "-0.000", "-0.000", false, 9, big.ToNearestAway},
	// basx617 toSci -0.0000           -> -0.0000
	{"basx617", "-0.0000", "-0.0000", false, 9, big.ToNearestAway},
	// basx618 toSci -0.00000          -> -0.00000
	{"basx618", "-0.00000", "-0.00000", false, 9, big.ToNearestAway},
	// basx619 toSci -0.000000         -> -0.000000
	{"basx619", "-0.000000", "-0.000000", false, 9, big.ToNearestAway},
	// basx620 toSci -0.0000000        -> -0E-7
	{"basx620", "-0.0000000", "-0E-7", false, 9, big.ToNearestAway},
	// basx621 toSci -0.00000000       -> -0E-8
	{"basx621", "-0.00000000", "-0E-8", false, 9, big.ToNearestAway},
	// basx622 toSci -0.000000000      -> -0E-9
	{"basx622", "-0.000000000", "-0E-9", false, 9, big.ToNearestAway},
	// basx630 toSci  0.00E+0          -> 0.00
	{"basx630", "0.00E+0", "0.00", false, 9, big.ToNearestAway},
	// basx631 toSci  0.00E+1          -> 0.0
	{"basx631", "0.00E+1", "0.0", false, 9, big.ToNearestAway},
	// basx632 toSci  0.00E+2          -> 0
	{"basx632", "0.00E+2", "0", false, 9, big.ToNearestAway},
	// basx633 toSci  0.00E+3          -> 0E+1
	{"basx633", "0.00E+3", "0E+1", false, 9, big.ToNearestAway},
	// basx634 toSci  0.00E+4          -> 0E+2
	{"basx634", "0.00E+4", "0E+2", false, 9, big.ToNearestAway},
	// basx635 toSci  0.00E+5          -> 0E+3
	{"basx635", "0.00E+5", "0E+3", false, 9, big.ToNearestAway},
	// basx636 toSci  0.00E+6          -> 0E+4
	{"basx636", "0.00E+6", "0E+4", false, 9, big.ToNearestAway},
	// basx637 toSci  0.00E+7          -> 0E+5
	{"basx637", "0.00E+7", "0E+5", false, 9, big.ToNearestAway},
	// basx638 toSci  0.00E+8          -> 0E+6
	{"basx638", "0.00E+8", "0E+6", false, 9, big.ToNearestAway},
	// basx639 toSci  0.00E+9          -> 0E+7
	{"basx639", "0.00E+9", "0E+7", false, 9, big.ToNearestAway},
	// basx640 toSci  0.0E+0           -> 0.0
	{"basx640", "0.0E+0", "0.0", false, 9, big.ToNearestAway},
	// basx641 toSci  0.0E+1           -> 0
	{"basx641", "0.0E+1", "0", false, 9, big.ToNearestAway},
	// basx642 toSci  0.0E+2           -> 0E+1
	{"basx642", "0.0E+2", "0E+1", false, 9, big.ToNearestAway},
	// basx643 toSci  0.0E+3           -> 0E+2
	{"basx643", "0.0E+3", "0E+2", false, 9, big.ToNearestAway},
	// basx644 toSci  0.0E+4           -> 0E+3
	{"basx644", "0.0E+4", "0E+3", false, 9, big.ToNearestAway},
	// basx645 toSci  0.0E+5           -> 0E+4
	{"basx645", "0.0E+5", "0E+4", false, 9, big.ToNearestAway},
	// basx646 toSci  0.0E+6           -> 0E+5
	{"basx646", "0.0E+6", "0E+5", false, 9, big.ToNearestAway},
	// basx647 toSci  0.0E+7           -> 0E+6
	{"basx647", "0.0E+7", "0E+6", false, 9, big.ToNearestAway},
	// basx648 toSci  0.0E+8           -> 0E+7
	{"basx648", "0.0E+8", "0E+7", false, 9, big.ToNearestAway},
	// basx649 toSci  0.0E+9           -> 0E+8
	{"basx649", "0.0E+9", "0E+8", false, 9, big.ToNearestAway},
	// basx650 toSci  0E+0             -> 0
	{"basx650", "0E+0", "0", false, 9, big.ToNearestAway},
	// basx651 toSci  0E+1             -> 0E+1
	{"basx651", "0E+1", "0E+1", false, 9, big.ToNearestAway},
	// basx652 toSci  0E+2             -> 0E+2
	{"basx652", "0E+2", "0E+2", false, 9, big.ToNearestAway},
	// basx653 toSci  0E+3             -> 0E+3
	{"basx653", "0E+3", "0E+3", false, 9, big.ToNearestAway},
	// basx654 toSci  0E+4             -> 0E+4
	{"basx654", "0E+4", "0E+4", false, 9, big.ToNearestAway},
	// basx655 toSci  0E+5             -> 0E+5
	{"basx655", "0E+5", "0E+5", false, 9, big.ToNearestAway},
	// basx656 toSci  0E+6             -> 0E+6
	{"basx656", "0E+6", "0E+6", false, 9, big.ToNearestAway},
	// basx657 toSci  0E+7             -> 0E+7
	{"basx657", "0E+7", "0E+7", false, 9, big.ToNearestAway},
	// basx658 toSci  0E+8             -> 0E+8
	{"basx658", "0E+8", "0E+8", false, 9, big.ToNearestAway},
	// basx659 toSci  0E+9             -> 0E+9
	{"basx659", "0E+9", "0E+9", false, 9, big.ToNearestAway},
	// basx660 toSci  0.0E-0           -> 0.0
	{"basx660", "0.0E-0", "0.0", false, 9, big.ToNearestAway},
	// basx661 toSci  0.0E-1           -> 0.00
	{"basx661", "0.0E-1", "0.00", false, 9, big.ToNearestAway},
	// basx662 toSci  0.0E-2           -> 0.000
	{"basx662", "0.0E-2", "0.000", false, 9, big.ToNearestAway},
	// basx663 toSci  0.0E-3           -> 0.0000
	{"basx663", "0.0E-3", "0.0000", false, 9, big.ToNearestAway},
	// basx664 toSci  0.0E-4           -> 0.00000
	{"basx664", "0.0E-4", "0.00000", false, 9, big.ToNearestAway},
	// basx665 toSci  0.0E-5           -> 0.000000
	{"basx665", "0.0E-5", "0.000000", false, 9, big.ToNearestAway},
	// basx666 toSci  0.0E-6           -> 0E-7
	{"basx666", "0.0E-6", "0E-7", false, 9, big.ToNearestAway},
	// basx667 toSci  0.0E-7           -> 0E-8
	{"basx667", "0.0E-7", "0E-8", false, 9, big.ToNearestAway},
	// basx668 toSci  0.0E-8           -> 0E-9
	{"basx668", "0.0E-8", "0E-9", false, 9, big.ToNearestAway},
	// basx669 toSci  0.0E-9           -> 0E-10
	{"basx669", "0.0E-9", "0E-10", false, 9, big.ToNearestAway},
	// basx670 toSci  0.00E-0          -> 0.00
	{"basx670", "0.00E-0", "0.00", false, 9, big.ToNearestAway},
	// basx671 toSci  0.00E-1          -> 0.000
	{"basx671", "0.00E-1", "0.000", false, 9, big.ToNearestAway},
	// basx672 toSci  0.00E-2          -> 0.0000
	{"basx672", "0.00E-2", "0.0000", false, 9, big.ToNearestAway},
	// basx673 toSci  0.00E-3          -> 0.00000
	{"basx673", "0.00E-3", "0.00000", false, 9, big.ToNearestAway},
	// basx674 toSci  0.00E-4          -> 0.000000
	{"basx674", "0.00E-4", "0.000000", false, 9, big.ToNearestAway},
	// basx675 toSci  0.00E-5          -> 0E-7
	{"basx675", "0.00E-5", "0E-7", false, 9, big.ToNearestAway},
	// basx676 toSci  0.00E-6          -> 0E-8
	{"basx676", "0.00E-6", "0E-8", false, 9, big.ToNearestAway},
	// basx677 toSci  0.00E-7          -> 0E-9
	{"basx677", "0.00E-7", "0E-9", false, 9, big.ToNearestAway},
	// basx678 toSci  0.00E-8          -> 0E-10
	{"basx678", "0.00E-8", "0E-10", false, 9, big.ToNearestAway},
	// basx679 toSci  0.00E-9          -> 0E-11
	{"basx679", "0.00E-9", "0E-11", false, 9, big.ToNearestAway},
	// basx680 toSci  000000.          ->  0
	{"basx680", "000000.", "0", false, 9, big.ToNearestAway},
	// basx681 toSci   00000.          ->  0
	{"basx681", "00000.", "0", false, 9, big.ToNearestAway},
	// basx682 toSci    0000.          ->  0
	{"basx682", "0000.", "0", false, 9, big.ToNearestAway},
	// basx683 toSci     000.          ->  0
	{"basx683", "000.", "0", false, 9, big.ToNearestAway},
	// basx684 toSci      00.          ->  0
	{"basx684", "00.", "0", false, 9, big.ToNearestAway},
	// basx685 toSci       0.          ->  0
	{"basx685", "0.", "0", false, 9, big.ToNearestAway},
	// basx686 toSci  +00000.          ->  0
	{"basx686", "+00000.", "0", false, 9, big.ToNearestAway},
	// basx687 toSci  -00000.          -> -0
	{"basx687", "-00000.", "-0", false, 9, big.ToNearestAway},
	// basx688 toSci  +0.              ->  0
	{"basx688", "+0.", "0", false, 9, big.ToNearestAway},
	// basx689 toSci  -0.              -> -0
	{"basx689", "-0.", "-0", false, 9, big.ToNearestAway},
	// Specials
	// precision: 4
	// basx700 toSci "NaN"             -> NaN
	{"basx700", "NaN", "", false, 4, big.ToNearestAway},
	// basx701 toSci "nan"             -> NaN
	{"basx701", "nan", "", false, 4, big.ToNearestAway},
	// basx702 toSci "nAn"             -> NaN
	{"basx702", "nAn", "", false, 4, big.ToNearestAway},
	// basx703 toSci "NAN"             -> NaN
	{"basx703", "NAN", "", false, 4, big.ToNearestAway},
	// basx704 toSci "+NaN"            -> NaN
	{"basx704", "+NaN", "", false, 4, big.ToNearestAway},
	// basx705 toSci "+nan"            -> NaN
	{"basx705", "+nan", "", false, 4, big.ToNearestAway},
	// basx706 toSci "+nAn"            -> NaN
	{"basx706", "+nAn", "", false, 4, big.ToNearestAway},
	// basx707 toSci "+NAN"            -> NaN
	{"basx707", "+NAN", "", false, 4, big.ToNearestAway},
	// basx708 toSci "-NaN"            -> -NaN
	{"basx708", "-NaN", "", false, 4, big.ToNearestAway},
	// basx709 toSci "-nan"            -> -NaN
	{"basx709", "-nan", "", false, 4, big.ToNearestAway},
	// basx710 toSci "-nAn"            -> -NaN
	{"basx710", "-nAn", "", false, 4, big.ToNearestAway},
	// basx711 toSci "-NAN"            -> -NaN
	{"basx711", "-NAN", "", false, 4, big.ToNearestAway},
	// basx712 toSci 'NaN0'            -> NaN
	{"basx712", "NaN0", "", false, 4, big.ToNearestAway},
	// basx713 toSci 'NaN1'            -> NaN1
	{"basx713", "NaN1", "", false, 4, big.ToNearestAway},
	// basx714 toSci 'NaN12'           -> NaN12
	{"basx714", "NaN12", "", false, 4, big.ToNearestAway},
	// basx715 toSci 'NaN123'          -> NaN123
	{"basx715", "NaN123", "", false, 4, big.ToNearestAway},
	// basx716 toSci 'NaN1234'         -> NaN1234
	{"basx716", "NaN1234", "", false, 4, big.ToNearestAway},
	// basx717 toSci 'NaN01'           -> NaN1
	{"basx717", "NaN01", "", false, 4, big.ToNearestAway},
	// basx718 toSci 'NaN012'          -> NaN12
	{"basx718", "NaN012", "", false, 4, big.ToNearestAway},
	// basx719 toSci 'NaN0123'         -> NaN123
	{"basx719", "NaN0123", "", false, 4, big.ToNearestAway},
	// basx720 toSci 'NaN01234'        -> NaN1234
	{"basx720", "NaN01234", "", false, 4, big.ToNearestAway},
	// basx721 toSci 'NaN001'          -> NaN1
	{"basx721", "NaN001", "", false, 4, big.ToNearestAway},
	// basx722 toSci 'NaN0012'         -> NaN12
	{"basx722", "NaN0012", "", false, 4, big.ToNearestAway},
	// basx723 toSci 'NaN00123'        -> NaN123
	{"basx723", "NaN00123", "", false, 4, big.ToNearestAway},
	// basx724 toSci 'NaN001234'       -> NaN1234
	{"basx724", "NaN001234", "", false, 4, big.ToNearestAway},
	// basx725 toSci 'NaN12345'        -> NaN Conversion_syntax
	{"basx725", "NaN12345", "", false, 4, big.ToNearestAway},
	// basx726 toSci 'NaN123e+1'       -> NaN Conversion_syntax
	{"basx726", "NaN123e+1", "", false, 4, big.ToNearestAway},
	// basx727 toSci 'NaN12.45'        -> NaN Conversion_syntax
	{"basx727", "NaN12.45", "", false, 4, big.ToNearestAway},
	// basx728 toSci 'NaN-12'          -> NaN Conversion_syntax
	{"basx728", "NaN-12", "", false, 4, big.ToNearestAway},
	// basx729 toSci 'NaN+12'          -> NaN Conversion_syntax
	{"basx729", "NaN+12", "", false, 4, big.ToNearestAway},
	// basx730 toSci "sNaN"            -> sNaN
	{"basx730", "sNaN", "", false, 4, big.ToNearestAway},
	// basx731 toSci "snan"            -> sNaN
	{"basx731", "snan", "", false, 4, big.ToNearestAway},
	// basx732 toSci "SnAn"            -> sNaN
	{"basx732", "SnAn", "", false, 4, big.ToNearestAway},
	// basx733 toSci "SNAN"            -> sNaN
	{"basx733", "SNAN", "", false, 4, big.ToNearestAway},
	// basx734 toSci "+sNaN"           -> sNaN
	{"basx734", "+sNaN", "", false, 4, big.ToNearestAway},
	// basx735 toSci "+snan"           -> sNaN
	{"basx735", "+snan", "", false, 4, big.ToNearestAway},
	// basx736 toSci "+SnAn"           -> sNaN
	{"basx736", "+SnAn", "", false, 4, big.ToNearestAway},
	// basx737 toSci "+SNAN"           -> sNaN
	{"basx737", "+SNAN", "", false, 4, big.ToNearestAway},
	// basx738 toSci "-sNaN"           -> -sNaN
	{"basx738", "-sNaN", "", false, 4, big.ToNearestAway},
	// basx739 toSci "-snan"           -> -sNaN
	{"basx739", "-snan", "", false, 4, big.ToNearestAway},
	// basx740 toSci "-SnAn"           -> -sNaN
	{"basx740", "-SnAn", "", false, 4, big.ToNearestAway},
	// basx741 toSci "-SNAN"           -> -sNaN
	{"basx741", "-SNAN", "", false, 4, big.ToNearestAway},
	// basx742 toSci 'sNaN0000'        -> sNaN
	{"basx742", "sNaN0000", "", false, 4, big.ToNearestAway},
	// basx743 toSci 'sNaN7'           -> sNaN7
	{"basx743", "sNaN7", "", false, 4, big.ToNearestAway},
	// basx744 toSci 'sNaN007234'      -> sNaN7234
	{"basx744", "sNaN007234", "", false, 4, big.ToNearestAway},
	// basx745 toSci 'sNaN72345'       -> NaN Conversion_syntax
	{"basx745", "sNaN72345", "", false, 4, big.ToNearestAway},
	// basx746 toSci 'sNaN72.45'       -> NaN Conversion_syntax
	{"basx746", "sNaN72.45", "", false, 4, big.ToNearestAway},
	// basx747 toSci 'sNaN-72'         -> NaN Conversion_syntax
	{"basx747", "sNaN-72", "", false, 4, big.ToNearestAway},
	// SKIP (infinity test): basx748 toSci "Inf"             -> Infinity
	// SKIP (infinity test): basx749 toSci "inf"             -> Infinity
	// SKIP (infinity test): basx750 toSci "iNf"             -> Infinity
	// SKIP (infinity test): basx751 toSci "INF"             -> Infinity
	// SKIP (infinity test): basx752 toSci "+Inf"            -> Infinity
	// SKIP (infinity test): basx753 toSci "+inf"            -> Infinity
	// SKIP (infinity test): basx754 toSci "+iNf"            -> Infinity
	// SKIP (infinity test): basx755 toSci "+INF"            -> Infinity
	// SKIP (infinity test): basx756 toSci "-Inf"            -> -Infinity
	// SKIP (infinity test): basx757 toSci "-inf"            -> -Infinity
	// SKIP (infinity test): basx758 toSci "-iNf"            -> -Infinity
	// SKIP (infinity test): basx759 toSci "-INF"            -> -Infinity
	// SKIP (infinity test): basx760 toSci "Infinity"        -> Infinity
	// SKIP (infinity test): basx761 toSci "infinity"        -> Infinity
	// SKIP (infinity test): basx762 toSci "iNfInItY"        -> Infinity
	// SKIP (infinity test): basx763 toSci "INFINITY"        -> Infinity
	// SKIP (infinity test): basx764 toSci "+Infinity"       -> Infinity
	// SKIP (infinity test): basx765 toSci "+infinity"       -> Infinity
	// SKIP (infinity test): basx766 toSci "+iNfInItY"       -> Infinity
	// SKIP (infinity test): basx767 toSci "+INFINITY"       -> Infinity
	// SKIP (infinity test): basx768 toSci "-Infinity"       -> -Infinity
	// SKIP (infinity test): basx769 toSci "-infinity"       -> -Infinity
	// SKIP (infinity test): basx770 toSci "-iNfInItY"       -> -Infinity
	// SKIP (infinity test): basx771 toSci "-INFINITY"       -> -Infinity
	// Specials and zeros for toEng
	// SKIP (toeng not supported): basx772 toEng "NaN"              -> NaN
	// SKIP (toeng not supported): basx773 toEng "-Infinity"        -> -Infinity
	// SKIP (toeng not supported): basx774 toEng "-sNaN"            -> -sNaN
	// SKIP (toeng not supported): basx775 toEng "-NaN"             -> -NaN
	// SKIP (toeng not supported): basx776 toEng "+Infinity"        -> Infinity
	// SKIP (toeng not supported): basx778 toEng "+sNaN"            -> sNaN
	// SKIP (toeng not supported): basx779 toEng "+NaN"             -> NaN
	// SKIP (toeng not supported): basx780 toEng "INFINITY"         -> Infinity
	// SKIP (toeng not supported): basx781 toEng "SNAN"             -> sNaN
	// SKIP (toeng not supported): basx782 toEng "NAN"              -> NaN
	// SKIP (toeng not supported): basx783 toEng "infinity"         -> Infinity
	// SKIP (toeng not supported): basx784 toEng "snan"             -> sNaN
	// SKIP (toeng not supported): basx785 toEng "nan"              -> NaN
	// SKIP (toeng not supported): basx786 toEng "InFINITY"         -> Infinity
	// SKIP (toeng not supported): basx787 toEng "SnAN"             -> sNaN
	// SKIP (toeng not supported): basx788 toEng "nAN"              -> NaN
	// SKIP (toeng not supported): basx789 toEng "iNfinity"         -> Infinity
	// SKIP (toeng not supported): basx790 toEng "sNan"             -> sNaN
	// SKIP (toeng not supported): basx791 toEng "Nan"              -> NaN
	// SKIP (toeng not supported): basx792 toEng "Infinity"         -> Infinity
	// SKIP (toeng not supported): basx793 toEng "sNaN"             -> sNaN
	// Zero toEng, etc.
	// SKIP (toeng not supported): basx800 toEng 0e+1              -> "0.00E+3"  -- doc example
	// SKIP (toeng not supported): basx801 toEng 0.000000000       -> 0E-9
	// SKIP (toeng not supported): basx802 toEng 0.00000000        -> 0.00E-6
	// SKIP (toeng not supported): basx803 toEng 0.0000000         -> 0.0E-6
	// SKIP (toeng not supported): basx804 toEng 0.000000          -> 0.000000
	// SKIP (toeng not supported): basx805 toEng 0.00000           -> 0.00000
	// SKIP (toeng not supported): basx806 toEng 0.0000            -> 0.0000
	// SKIP (toeng not supported): basx807 toEng 0.000             -> 0.000
	// SKIP (toeng not supported): basx808 toEng 0.00              -> 0.00
	// SKIP (toeng not supported): basx809 toEng 0.0               -> 0.0
	// SKIP (toeng not supported): basx810 toEng  .0               -> 0.0
	// SKIP (toeng not supported): basx811 toEng 0.                -> 0
	// SKIP (toeng not supported): basx812 toEng -.0               -> -0.0
	// SKIP (toeng not supported): basx813 toEng -0.               -> -0
	// SKIP (toeng not supported): basx814 toEng -0.0              -> -0.0
	// SKIP (toeng not supported): basx815 toEng -0.00             -> -0.00
	// SKIP (toeng not supported): basx816 toEng -0.000            -> -0.000
	// SKIP (toeng not supported): basx817 toEng -0.0000           -> -0.0000
	// SKIP (toeng not supported): basx818 toEng -0.00000          -> -0.00000
	// SKIP (toeng not supported): basx819 toEng -0.000000         -> -0.000000
	// SKIP (toeng not supported): basx820 toEng -0.0000000        -> -0.0E-6
	// SKIP (toeng not supported): basx821 toEng -0.00000000       -> -0.00E-6
	// SKIP (toeng not supported): basx822 toEng -0.000000000      -> -0E-9
	// SKIP (toeng not supported): basx830 toEng  0.00E+0          -> 0.00
	// SKIP (toeng not supported): basx831 toEng  0.00E+1          -> 0.0
	// SKIP (toeng not supported): basx832 toEng  0.00E+2          -> 0
	// SKIP (toeng not supported): basx833 toEng  0.00E+3          -> 0.00E+3
	// SKIP (toeng not supported): basx834 toEng  0.00E+4          -> 0.0E+3
	// SKIP (toeng not supported): basx835 toEng  0.00E+5          -> 0E+3
	// SKIP (toeng not supported): basx836 toEng  0.00E+6          -> 0.00E+6
	// SKIP (toeng not supported): basx837 toEng  0.00E+7          -> 0.0E+6
	// SKIP (toeng not supported): basx838 toEng  0.00E+8          -> 0E+6
	// SKIP (toeng not supported): basx839 toEng  0.00E+9          -> 0.00E+9
	// SKIP (toeng not supported): basx840 toEng  0.0E+0           -> 0.0
	// SKIP (toeng not supported): basx841 toEng  0.0E+1           -> 0
	// SKIP (toeng not supported): basx842 toEng  0.0E+2           -> 0.00E+3
	// SKIP (toeng not supported): basx843 toEng  0.0E+3           -> 0.0E+3
	// SKIP (toeng not supported): basx844 toEng  0.0E+4           -> 0E+3
	// SKIP (toeng not supported): basx845 toEng  0.0E+5           -> 0.00E+6
	// SKIP (toeng not supported): basx846 toEng  0.0E+6           -> 0.0E+6
	// SKIP (toeng not supported): basx847 toEng  0.0E+7           -> 0E+6
	// SKIP (toeng not supported): basx848 toEng  0.0E+8           -> 0.00E+9
	// SKIP (toeng not supported): basx849 toEng  0.0E+9           -> 0.0E+9
	// SKIP (toeng not supported): basx850 toEng  0E+0             -> 0
	// SKIP (toeng not supported): basx851 toEng  0E+1             -> 0.00E+3
	// SKIP (toeng not supported): basx852 toEng  0E+2             -> 0.0E+3
	// SKIP (toeng not supported): basx853 toEng  0E+3             -> 0E+3
	// SKIP (toeng not supported): basx854 toEng  0E+4             -> 0.00E+6
	// SKIP (toeng not supported): basx855 toEng  0E+5             -> 0.0E+6
	// SKIP (toeng not supported): basx856 toEng  0E+6             -> 0E+6
	// SKIP (toeng not supported): basx857 toEng  0E+7             -> 0.00E+9
	// SKIP (toeng not supported): basx858 toEng  0E+8             -> 0.0E+9
	// SKIP (toeng not supported): basx859 toEng  0E+9             -> 0E+9
	// SKIP (toeng not supported): basx860 toEng  0.0E-0           -> 0.0
	// SKIP (toeng not supported): basx861 toEng  0.0E-1           -> 0.00
	// SKIP (toeng not supported): basx862 toEng  0.0E-2           -> 0.000
	// SKIP (toeng not supported): basx863 toEng  0.0E-3           -> 0.0000
	// SKIP (toeng not supported): basx864 toEng  0.0E-4           -> 0.00000
	// SKIP (toeng not supported): basx865 toEng  0.0E-5           -> 0.000000
	// SKIP (toeng not supported): basx866 toEng  0.0E-6           -> 0.0E-6
	// SKIP (toeng not supported): basx867 toEng  0.0E-7           -> 0.00E-6
	// SKIP (toeng not supported): basx868 toEng  0.0E-8           -> 0E-9
	// SKIP (toeng not supported): basx869 toEng  0.0E-9           -> 0.0E-9
	// SKIP (toeng not supported): basx870 toEng  0.00E-0          -> 0.00
	// SKIP (toeng not supported): basx871 toEng  0.00E-1          -> 0.000
	// SKIP (toeng not supported): basx872 toEng  0.00E-2          -> 0.0000
	// SKIP (toeng not supported): basx873 toEng  0.00E-3          -> 0.00000
	// SKIP (toeng not supported): basx874 toEng  0.00E-4          -> 0.000000
	// SKIP (toeng not supported): basx875 toEng  0.00E-5          -> 0.0E-6
	// SKIP (toeng not supported): basx876 toEng  0.00E-6          -> 0.00E-6
	// SKIP (toeng not supported): basx877 toEng  0.00E-7          -> 0E-9
	// SKIP (toeng not supported): basx878 toEng  0.00E-8          -> 0.0E-9
	// SKIP (toeng not supported): basx879 toEng  0.00E-9          -> 0.00E-9
	// rounding: half_up
	// precision: 9
	// subnormals and overflows
	// basx906 toSci '99e999999999'       -> Infinity Overflow  Inexact Rounded
	{"basx906", "99e999999999", "Inf", true, 9, big.ToNearestAway},
	// basx907 toSci '999e999999999'      -> Infinity Overflow  Inexact Rounded
	{"basx907", "999e999999999", "Inf", true, 9, big.ToNearestAway},
	// basx908 toSci '0.9e-999999999'     -> 9E-1000000000 Subnormal
	{"basx908", "0.9e-999999999", "9E-1000000000", false, 9, big.ToNearestAway},
	// basx909 toSci '0.09e-999999999'    -> 9E-1000000001 Subnormal
	{"basx909", "0.09e-999999999", "9E-1000000001", false, 9, big.ToNearestAway},
	// basx910 toSci '0.1e1000000000'     -> 1E+999999999
	{"basx910", "0.1e1000000000", "1E+999999999", false, 9, big.ToNearestAway},
	// basx911 toSci '10e-1000000000'     -> 1.0E-999999999
	{"basx911", "10e-1000000000", "1.0E-999999999", false, 9, big.ToNearestAway},
	// basx912 toSci '0.9e9999999999'     -> Infinity Overflow  Inexact Rounded
	{"basx912", "0.9e9999999999", "Inf", true, 9, big.ToNearestAway},
	// basx913 toSci '99e-9999999999'     -> 0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx913", "99e-9999999999", "0E-1000000007", true, 9, big.ToNearestAway},
	// basx914 toSci '111e9999999999'     -> Infinity Overflow  Inexact Rounded
	{"basx914", "111e9999999999", "Inf", true, 9, big.ToNearestAway},
	// basx915 toSci '1111e-9999999999'   -> 0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx915", "1111e-9999999999", "0E-1000000007", true, 9, big.ToNearestAway},
	// basx916 toSci '1111e-99999999999'  -> 0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx916", "1111e-99999999999", "0E-1000000007", true, 9, big.ToNearestAway},
	// basx917 toSci '7e1000000000'       -> Infinity Overflow  Inexact Rounded
	{"basx917", "7e1000000000", "Inf", true, 9, big.ToNearestAway},
	// negatives the same
	// basx918 toSci '-99e999999999'      -> -Infinity Overflow  Inexact Rounded
	{"basx918", "-99e999999999", "-Inf", true, 9, big.ToNearestAway},
	// basx919 toSci '-999e999999999'     -> -Infinity Overflow  Inexact Rounded
	{"basx919", "-999e999999999", "-Inf", true, 9, big.ToNearestAway},
	// basx920 toSci '-0.9e-999999999'    -> -9E-1000000000 Subnormal
	{"basx920", "-0.9e-999999999", "-9E-1000000000", false, 9, big.ToNearestAway},
	// basx921 toSci '-0.09e-999999999'   -> -9E-1000000001 Subnormal
	{"basx921", "-0.09e-999999999", "-9E-1000000001", false, 9, big.ToNearestAway},
	// basx922 toSci '-0.1e1000000000'    -> -1E+999999999
	{"basx922", "-0.1e1000000000", "-1E+999999999", false, 9, big.ToNearestAway},
	// basx923 toSci '-10e-1000000000'    -> -1.0E-999999999
	{"basx923", "-10e-1000000000", "-1.0E-999999999", false, 9, big.ToNearestAway},
	// basx924 toSci '-0.9e9999999999'    -> -Infinity Overflow  Inexact Rounded
	{"basx924", "-0.9e9999999999", "-Inf", true, 9, big.ToNearestAway},
	// basx925 toSci '-99e-9999999999'    -> -0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx925", "-99e-9999999999", "-0E-1000000007", true, 9, big.ToNearestAway},
	// basx926 toSci '-111e9999999999'    -> -Infinity Overflow  Inexact Rounded
	{"basx926", "-111e9999999999", "-Inf", true, 9, big.ToNearestAway},
	// basx927 toSci '-1111e-9999999999'  -> -0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx927", "-1111e-9999999999", "-0E-1000000007", true, 9, big.ToNearestAway},
	// basx928 toSci '-1111e-99999999999' -> -0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	{"basx928", "-1111e-99999999999", "-0E-1000000007", true, 9, big.ToNearestAway},
	// basx929 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	{"basx929", "-7e1000000000", "-Inf", true, 9, big.ToNearestAway},
	// rounding: ceiling
	// basx930 toSci  '7e1000000000'      ->  Infinity Overflow  Inexact Rounded
	{"basx930", "7e1000000000", "Inf", true, 9, big.ToPositiveInf},
	// basx931 toSci '-7e1000000000'      -> -9.99999999E+999999999 Overflow  Inexact Rounded
	{"basx931", "-7e1000000000", "-9.99999999E+999999999", true, 9, big.ToPositiveInf},
	// rounding: up
	// basx932 toSci  '7e1000000000'      ->  Infinity Overflow  Inexact Rounded
	{"basx932", "7e1000000000", "Inf", true, 9, big.AwayFromZero},
	// basx933 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	{"basx933", "-7e1000000000", "-Inf", true, 9, big.AwayFromZero},
	// rounding: down
	// basx934 toSci  '7e1000000000'      ->  9.99999999E+999999999 Overflow  Inexact Rounded
	{"basx934", "7e1000000000", "9.99999999E+999999999", true, 9, big.ToZero},
	// basx935 toSci '-7e1000000000'      -> -9.99999999E+999999999 Overflow  Inexact Rounded
	{"basx935", "-7e1000000000", "-9.99999999E+999999999", true, 9, big.ToZero},
	// rounding: floor
	// basx936 toSci  '7e1000000000'      ->  9.99999999E+999999999 Overflow  Inexact Rounded
	{"basx936", "7e1000000000", "9.99999999E+999999999", true, 9, big.ToNegativeInf},
	// basx937 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	{"basx937", "-7e1000000000", "-Inf", true, 9, big.ToNegativeInf},
	// rounding: half_up
	// basx938 toSci  '7e1000000000'      ->  Infinity Overflow  Inexact Rounded
	{"basx938", "7e1000000000", "Inf", true, 9, big.ToNearestAway},
	// basx939 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	{"basx939", "-7e1000000000", "-Inf", true, 9, big.ToNearestAway},
	// rounding: half_even
	// basx940 toSci  '7e1000000000'      ->  Infinity Overflow  Inexact Rounded
	{"basx940", "7e1000000000", "Inf", true, 9, big.ToNearestEven},
	// basx941 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	{"basx941", "-7e1000000000", "-Inf", true, 9, big.ToNearestEven},
	// rounding: half_down
	// SKIP (unsupported rounding): basx942 toSci  '7e1000000000'      ->  Infinity Overflow  Inexact Rounded
	// SKIP (unsupported rounding): basx943 toSci '-7e1000000000'      -> -Infinity Overflow  Inexact Rounded
	// rounding: half_even
	// Giga exponent initial tests
	// maxexponent: 999999999
	// minexponent: -999999999
	// basx951 toSci '99e999'          -> '9.9E+1000'
	{"basx951", "99e999", "9.9E+1000", false, 9, big.ToNearestEven},
	// basx952 toSci '999e999'         -> '9.99E+1001'
	{"basx952", "999e999", "9.99E+1001", false, 9, big.ToNearestEven},
	// basx953 toSci '0.9e-999'        -> '9E-1000'
	{"basx953", "0.9e-999", "9E-1000", false, 9, big.ToNearestEven},
	// basx954 toSci '0.09e-999'       -> '9E-1001'
	{"basx954", "0.09e-999", "9E-1001", false, 9, big.ToNearestEven},
	// basx955 toSci '0.1e1001'        -> '1E+1000'
	{"basx955", "0.1e1001", "1E+1000", false, 9, big.ToNearestEven},
	// basx956 toSci '10e-1001'        -> '1.0E-1000'
	{"basx956", "10e-1001", "1.0E-1000", false, 9, big.ToNearestEven},
	// basx957 toSci '0.9e9999'        -> '9E+9998'
	{"basx957", "0.9e9999", "9E+9998", false, 9, big.ToNearestEven},
	// basx958 toSci '99e-9999'        -> '9.9E-9998'
	{"basx958", "99e-9999", "9.9E-9998", false, 9, big.ToNearestEven},
	// basx959 toSci '111e9997'        -> '1.11E+9999'
	{"basx959", "111e9997", "1.11E+9999", false, 9, big.ToNearestEven},
	// basx960 toSci '1111e-9999'      -> '1.111E-9996'
	{"basx960", "1111e-9999", "1.111E-9996", false, 9, big.ToNearestEven},
	// basx961 toSci '99e9999'         -> '9.9E+10000'
	{"basx961", "99e9999", "9.9E+10000", false, 9, big.ToNearestEven},
	// basx962 toSci '999e9999'        -> '9.99E+10001'
	{"basx962", "999e9999", "9.99E+10001", false, 9, big.ToNearestEven},
	// basx963 toSci '0.9e-9999'       -> '9E-10000'
	{"basx963", "0.9e-9999", "9E-10000", false, 9, big.ToNearestEven},
	// basx964 toSci '0.09e-9999'      -> '9E-10001'
	{"basx964", "0.09e-9999", "9E-10001", false, 9, big.ToNearestEven},
	// basx965 toSci '0.1e10001'       -> '1E+10000'
	{"basx965", "0.1e10001", "1E+10000", false, 9, big.ToNearestEven},
	// basx966 toSci '10e-10001'       -> '1.0E-10000'
	{"basx966", "10e-10001", "1.0E-10000", false, 9, big.ToNearestEven},
	// basx967 toSci '0.9e99999'       -> '9E+99998'
	{"basx967", "0.9e99999", "9E+99998", false, 9, big.ToNearestEven},
	// basx968 toSci '99e-99999'       -> '9.9E-99998'
	{"basx968", "99e-99999", "9.9E-99998", false, 9, big.ToNearestEven},
	// basx969 toSci '111e99999'       -> '1.11E+100001'
	{"basx969", "111e99999", "1.11E+100001", false, 9, big.ToNearestEven},
	// basx970 toSci '1111e-99999'     -> '1.111E-99996'
	{"basx970", "1111e-99999", "1.111E-99996", false, 9, big.ToNearestEven},
	// basx971 toSci "0.09e999999999"  -> '9E+999999997'
	{"basx971", "0.09e999999999", "9E+999999997", false, 9, big.ToNearestEven},
	// basx972 toSci "0.9e999999999"   -> '9E+999999998'
	{"basx972", "0.9e999999999", "9E+999999998", false, 9, big.ToNearestEven},
	// basx973 toSci "9e999999999"     -> '9E+999999999'
	{"basx973", "9e999999999", "9E+999999999", false, 9, big.ToNearestEven},
	// basx974 toSci "9.9e999999999"   -> '9.9E+999999999'
	{"basx974", "9.9e999999999", "9.9E+999999999", false, 9, big.ToNearestEven},
	// basx975 toSci "9.99e999999999"  -> '9.99E+999999999'
	{"basx975", "9.99e999999999", "9.99E+999999999", false, 9, big.ToNearestEven},
	// basx976 toSci "9.99e-999999999" -> '9.99E-999999999'
	{"basx976", "9.99e-999999999", "9.99E-999999999", false, 9, big.ToNearestEven},
	// basx977 toSci "9.9e-999999999"  -> '9.9E-999999999'
	{"basx977", "9.9e-999999999", "9.9E-999999999", false, 9, big.ToNearestEven},
	// basx978 toSci "9e-999999999"    -> '9E-999999999'
	{"basx978", "9e-999999999", "9E-999999999", false, 9, big.ToNearestEven},
	// basx979 toSci "99e-999999999"   -> '9.9E-999999998'
	{"basx979", "99e-999999999", "9.9E-999999998", false, 9, big.ToNearestEven},
	// basx980 toSci "999e-999999999"  -> '9.99E-999999997'
	{"basx980", "999e-999999999", "9.99E-999999997", false, 9, big.ToNearestEven},
	// Varying exponent maximums
	// precision: 5
	// maxexponent: 0
	// minexponent: 0
	// SKIP (emax not supported): emax001 toSci -1E+2  -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax002 toSci -100   -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax003 toSci  -10   -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax004 toSci   -9.9 -> -9.9
	// SKIP (emax not supported): emax005 toSci   -9   -> -9
	// SKIP (emax not supported): emax006 toSci   -1   -> -1
	// SKIP (emax not supported): emax007 toSci    0   ->  0
	// SKIP (emax not supported): emax008 toSci    1   ->  1
	// SKIP (emax not supported): emax009 toSci    9   ->  9
	// SKIP (emax not supported): emax010 toSci    9.9 ->  9.9
	// SKIP (emax not supported): emax011 toSci   10   ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax012 toSci  100   ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax013 toSci  1E+2  ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax014 toSci   0.99 ->  0.99 Subnormal
	// SKIP (emax not supported): emax015 toSci   0.1  ->  0.1 Subnormal
	// SKIP (emax not supported): emax016 toSci   0.01 ->  0.01 Subnormal
	// SKIP (emax not supported): emax017 toSci  1E-1  ->  0.1 Subnormal
	// SKIP (emax not supported): emax018 toSci  1E-2  ->  0.01 Subnormal
	// maxexponent: 1
	// minexponent: -1
	// SKIP (emax not supported): emax100 toSci -1E+3  -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax101 toSci -1E+2  -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax102 toSci -100   -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax103 toSci  -10   -> -10
	// SKIP (emax not supported): emax104 toSci   -9.9 -> -9.9
	// SKIP (emax not supported): emax105 toSci   -9   -> -9
	// SKIP (emax not supported): emax106 toSci   -1   -> -1
	// SKIP (emax not supported): emax107 toSci    0   ->  0
	// SKIP (emax not supported): emax108 toSci    1   ->  1
	// SKIP (emax not supported): emax109 toSci    9   ->  9
	// SKIP (emax not supported): emax110 toSci    9.9 ->  9.9
	// SKIP (emax not supported): emax111 toSci   10   -> 10
	// SKIP (emax not supported): emax112 toSci  100   ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax113 toSci  1E+2  ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax114 toSci  1E+3  ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax115 toSci   0.99 ->  0.99
	// SKIP (emax not supported): emax116 toSci   0.1  ->  0.1
	// SKIP (emax not supported): emax117 toSci   0.01 ->  0.01 Subnormal
	// SKIP (emax not supported): emax118 toSci  1E-1  ->  0.1
	// SKIP (emax not supported): emax119 toSci  1E-2  ->  0.01 Subnormal
	// SKIP (emax not supported): emax120 toSci  1E-3  ->  0.001 Subnormal
	// SKIP (emax not supported): emax121 toSci  1.1E-3  ->  0.0011 Subnormal
	// SKIP (emax not supported): emax122 toSci  1.11E-3  ->  0.00111 Subnormal
	// SKIP (emax not supported): emax123 toSci  1.111E-3  ->  0.00111 Subnormal Underflow Inexact Rounded
	// SKIP (emax not supported): emax124 toSci  1.1111E-3  ->  0.00111 Subnormal Underflow Inexact Rounded
	// SKIP (emax not supported): emax125 toSci  1.11111E-3  ->  0.00111 Subnormal Underflow Inexact Rounded
	// maxexponent: 2
	// minexponent: -2
	// precision: 9
	// SKIP (emax not supported): emax200 toSci -1E+3  -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax201 toSci -1E+2  -> -1E+2
	// SKIP (emax not supported): emax202 toSci -100   -> -100
	// SKIP (emax not supported): emax203 toSci  -10   -> -10
	// SKIP (emax not supported): emax204 toSci   -9.9 -> -9.9
	// SKIP (emax not supported): emax205 toSci   -9   -> -9
	// SKIP (emax not supported): emax206 toSci   -1   -> -1
	// SKIP (emax not supported): emax207 toSci    0   ->  0
	// SKIP (emax not supported): emax208 toSci    1   ->  1
	// SKIP (emax not supported): emax209 toSci    9   ->  9
	// SKIP (emax not supported): emax210 toSci    9.9 ->  9.9
	// SKIP (emax not supported): emax211 toSci   10   -> 10
	// SKIP (emax not supported): emax212 toSci  100   -> 100
	// SKIP (emax not supported): emax213 toSci  1E+2  -> 1E+2
	// SKIP (emax not supported): emax214 toSci  1E+3  ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax215 toSci   0.99 ->  0.99
	// SKIP (emax not supported): emax216 toSci   0.1  ->  0.1
	// SKIP (emax not supported): emax217 toSci   0.01 ->  0.01
	// SKIP (emax not supported): emax218 toSci  0.001 ->  0.001 Subnormal
	// SKIP (emax not supported): emax219 toSci  1E-1  ->  0.1
	// SKIP (emax not supported): emax220 toSci  1E-2  ->  0.01
	// SKIP (emax not supported): emax221 toSci  1E-3  ->  0.001 Subnormal
	// SKIP (emax not supported): emax222 toSci  1E-4  ->  0.0001 Subnormal
	// SKIP (emax not supported): emax223 toSci  1E-5  ->  0.00001 Subnormal
	// SKIP (emax not supported): emax224 toSci  1E-6  ->  0.000001 Subnormal
	// SKIP (emax not supported): emax225 toSci  1E-7  ->  1E-7  Subnormal
	// SKIP (emax not supported): emax226 toSci  1E-8  ->  1E-8  Subnormal
	// SKIP (emax not supported): emax227 toSci  1E-9  ->  1E-9  Subnormal
	// SKIP (emax not supported): emax228 toSci  1E-10 ->  1E-10 Subnormal
	// SKIP (emax not supported): emax229 toSci  1E-11 ->  0E-10 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax230 toSci  1E-12 ->  0E-10 Underflow Subnormal Inexact Rounded Clamped
	// maxexponent: 7
	// minexponent: -7
	// SKIP (emax not supported): emax231 toSci  1E-8  ->  1E-8 Subnormal
	// SKIP (emax not supported): emax232 toSci  1E-7  ->  1E-7
	// SKIP (emax not supported): emax233 toSci  1E-6  ->  0.000001
	// SKIP (emax not supported): emax234 toSci  1E-5  ->  0.00001
	// SKIP (emax not supported): emax235 toSci  1E+5  ->  1E+5
	// SKIP (emax not supported): emax236 toSci  1E+6  ->  1E+6
	// SKIP (emax not supported): emax237 toSci  1E+7  ->  1E+7
	// SKIP (emax not supported): emax238 toSci  1E+8  ->  Infinity Overflow Inexact Rounded
	// maxexponent: 9
	// minexponent: -9
	// SKIP (emax not supported): emax240 toSci  1E-21 ->  0E-17 Subnormal Underflow Inexact Rounded Clamped
	// SKIP (emax not supported): emax241 toSci  1E-10 ->  1E-10 Subnormal
	// SKIP (emax not supported): emax242 toSci  1E-9  ->  1E-9
	// SKIP (emax not supported): emax243 toSci  1E-8  ->  1E-8
	// SKIP (emax not supported): emax244 toSci  1E-7  ->  1E-7
	// SKIP (emax not supported): emax245 toSci  1E+7  ->  1E+7
	// SKIP (emax not supported): emax246 toSci  1E+8  ->  1E+8
	// SKIP (emax not supported): emax247 toSci  1E+9  ->  1E+9
	// SKIP (emax not supported): emax248 toSci  1E+10 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 10  -- boundary
	// minexponent: -10
	// SKIP (emax not supported): emax250 toSci  1E-21 ->  0E-18 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax251 toSci  1E-11 ->  1E-11 Subnormal
	// SKIP (emax not supported): emax252 toSci  1E-10 ->  1E-10
	// SKIP (emax not supported): emax253 toSci  1E-9  ->  1E-9
	// SKIP (emax not supported): emax254 toSci  1E-8  ->  1E-8
	// SKIP (emax not supported): emax255 toSci  1E+8  ->  1E+8
	// SKIP (emax not supported): emax256 toSci  1E+9  ->  1E+9
	// SKIP (emax not supported): emax257 toSci  1E+10 ->  1E+10
	// SKIP (emax not supported): emax258 toSci  1E+11 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax260 toSci  1.00E-21 ->  0E-18 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax261 toSci  1.00E-11 ->  1.00E-11 Subnormal
	// SKIP (emax not supported): emax262 toSci  1.00E-10 ->  1.00E-10
	// SKIP (emax not supported): emax263 toSci  1.00E-9  ->  1.00E-9
	// SKIP (emax not supported): emax264 toSci  1.00E-8  ->  1.00E-8
	// SKIP (emax not supported): emax265 toSci  1.00E+8  ->  1.00E+8
	// SKIP (emax not supported): emax266 toSci  1.00E+9  ->  1.00E+9
	// SKIP (emax not supported): emax267 toSci  1.00E+10 ->  1.00E+10
	// SKIP (emax not supported): emax268 toSci  1.00E+11 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax270 toSci  9.99E-21 ->  0E-18 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax271 toSci  9.99E-11 ->  9.99E-11 Subnormal
	// SKIP (emax not supported): emax272 toSci  9.99E-10 ->  9.99E-10
	// SKIP (emax not supported): emax273 toSci  9.99E-9  ->  9.99E-9
	// SKIP (emax not supported): emax274 toSci  9.99E-8  ->  9.99E-8
	// SKIP (emax not supported): emax275 toSci  9.99E+8  ->  9.99E+8
	// SKIP (emax not supported): emax276 toSci  9.99E+9  ->  9.99E+9
	// SKIP (emax not supported): emax277 toSci  9.99E+10 ->  9.99E+10
	// SKIP (emax not supported): emax278 toSci  9.99E+11 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 99
	// minexponent: -99
	// SKIP (emax not supported): emax280 toSci  1E-120 ->  0E-107 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax281 toSci  1E-100 ->  1E-100 Subnormal
	// SKIP (emax not supported): emax282 toSci  1E-99  ->  1E-99
	// SKIP (emax not supported): emax283 toSci  1E-98  ->  1E-98
	// SKIP (emax not supported): emax284 toSci  1E+98  ->  1E+98
	// SKIP (emax not supported): emax285 toSci  1E+99  ->  1E+99
	// SKIP (emax not supported): emax286 toSci  1E+100 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 999
	// minexponent: -999
	// SKIP (emax not supported): emax291 toSci  1E-1000 ->  1E-1000 Subnormal
	// SKIP (emax not supported): emax292 toSci  1E-999  ->  1E-999
	// SKIP (emax not supported): emax293 toSci  1E+999  ->  1E+999
	// SKIP (emax not supported): emax294 toSci  1E+1000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 9999
	// minexponent: -9999
	// SKIP (emax not supported): emax301 toSci  1E-10000 ->  1E-10000 Subnormal
	// SKIP (emax not supported): emax302 toSci  1E-9999  ->  1E-9999
	// SKIP (emax not supported): emax303 toSci  1E+9999  ->  1E+9999
	// SKIP (emax not supported): emax304 toSci  1E+10000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 99999
	// minexponent: -99999
	// SKIP (emax not supported): emax311 toSci  1E-100000 ->  1E-100000 Subnormal
	// SKIP (emax not supported): emax312 toSci  1E-99999  ->  1E-99999
	// SKIP (emax not supported): emax313 toSci  1E+99999  ->  1E+99999
	// SKIP (emax not supported): emax314 toSci  1E+100000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 999999
	// minexponent: -999999
	// SKIP (emax not supported): emax321 toSci  1E-1000000 ->  1E-1000000 Subnormal
	// SKIP (emax not supported): emax322 toSci  1E-999999  ->  1E-999999
	// SKIP (emax not supported): emax323 toSci  1E+999999  ->  1E+999999
	// SKIP (emax not supported): emax324 toSci  1E+1000000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 9999999
	// minexponent: -9999999
	// SKIP (emax not supported): emax331 toSci  1E-10000000 ->  1E-10000000 Subnormal
	// SKIP (emax not supported): emax332 toSci  1E-9999999  ->  1E-9999999
	// SKIP (emax not supported): emax333 toSci  1E+9999999  ->  1E+9999999
	// SKIP (emax not supported): emax334 toSci  1E+10000000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 99999999
	// minexponent: -99999999
	// SKIP (emax not supported): emax341 toSci  1E-100000000 ->  1E-100000000 Subnormal
	// SKIP (emax not supported): emax342 toSci  1E-99999999  ->  1E-99999999
	// SKIP (emax not supported): emax343 toSci  1E+99999999  ->  1E+99999999
	// SKIP (emax not supported): emax344 toSci  1E+100000000 ->  Infinity Overflow Inexact Rounded
	// maxexponent: 999999999
	// minexponent: -999999999
	// SKIP (emax not supported): emax347 toSci  1E-1000000008     ->  0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax348 toSci  1E-1000000007     ->  1E-1000000007 Subnormal
	// SKIP (emax not supported): emax349 toSci  1E-1000000000     ->  1E-1000000000 Subnormal
	// SKIP (emax not supported): emax350 toSci  1E-999999999      ->  1E-999999999
	// SKIP (emax not supported): emax351 toSci  1E+999999999      ->  1E+999999999
	// SKIP (emax not supported): emax352 toSci  1E+1000000000     ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax353 toSci  1.000E-1000000000 ->  1.000E-1000000000 Subnormal
	// SKIP (emax not supported): emax354 toSci  1.000E-999999999  ->  1.000E-999999999
	// SKIP (emax not supported): emax355 toSci  1.000E+999999999  ->  1.000E+999999999
	// SKIP (emax not supported): emax356 toSci  1.000E+1000000000 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax357 toSci  1.001E-1000000008 ->  0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax358 toSci  1.001E-1000000007 ->  1E-1000000007 Subnormal Inexact Rounded Underflow
	// SKIP (emax not supported): emax359 toSci  1.001E-1000000000 ->  1.001E-1000000000 Subnormal
	// SKIP (emax not supported): emax360 toSci  1.001E-999999999  ->  1.001E-999999999
	// SKIP (emax not supported): emax361 toSci  1.001E+999999999  ->  1.001E+999999999
	// SKIP (emax not supported): emax362 toSci  1.001E+1000000000 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax363 toSci  9.000E-1000000000 ->  9.000E-1000000000 Subnormal
	// SKIP (emax not supported): emax364 toSci  9.000E-999999999  ->  9.000E-999999999
	// SKIP (emax not supported): emax365 toSci  9.000E+999999999  ->  9.000E+999999999
	// SKIP (emax not supported): emax366 toSci  9.000E+1000000000 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax367 toSci  9.999E-1000000009 ->  0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax368 toSci  9.999E-1000000008 ->  1E-1000000007 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax369 toSci  9.999E-1000000007 ->  1.0E-1000000006 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax370 toSci  9.999E-1000000000 ->  9.999E-1000000000 Subnormal
	// SKIP (emax not supported): emax371 toSci  9.999E-999999999  ->  9.999E-999999999
	// SKIP (emax not supported): emax372 toSci  9.999E+999999999  ->  9.999E+999999999
	// SKIP (emax not supported): emax373 toSci  9.999E+1000000000 ->  Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax374 toSci -1E-1000000000     -> -1E-1000000000 Subnormal
	// SKIP (emax not supported): emax375 toSci -1E-999999999      -> -1E-999999999
	// SKIP (emax not supported): emax376 toSci -1E+999999999      -> -1E+999999999
	// SKIP (emax not supported): emax377 toSci -1E+1000000000     -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax378 toSci -1.000E-1000000000 -> -1.000E-1000000000 Subnormal
	// SKIP (emax not supported): emax379 toSci -1.000E-999999999  -> -1.000E-999999999
	// SKIP (emax not supported): emax380 toSci -1.000E+999999999  -> -1.000E+999999999
	// SKIP (emax not supported): emax381 toSci -1.000E+1000000000 -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax382 toSci -1.001E-1000000008 -> -0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax383 toSci -1.001E-999999999  -> -1.001E-999999999
	// SKIP (emax not supported): emax384 toSci -1.001E+999999999  -> -1.001E+999999999
	// SKIP (emax not supported): emax385 toSci -1.001E+1000000000 -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax386 toSci -9.000E-1000000123 -> -0E-1000000007 Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax387 toSci -9.000E-999999999  -> -9.000E-999999999
	// SKIP (emax not supported): emax388 toSci -9.000E+999999999  -> -9.000E+999999999
	// SKIP (emax not supported): emax389 toSci -9.000E+1000000000 -> -Infinity Overflow Inexact Rounded
	// SKIP (emax not supported): emax390 toSci -9.999E-1000000008 -> -1E-1000000007 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax391 toSci -9.999E-999999999  -> -9.999E-999999999
	// SKIP (emax not supported): emax392 toSci -9.999E+999999999  -> -9.999E+999999999
	// SKIP (emax not supported): emax393 toSci -9.999E+1000000000 -> -Infinity Overflow Inexact Rounded
	// Now check 854 rounding of subnormals and proper underflow to 0
	// precision: 5
	// maxexponent: 999
	// minexponent: -999
	// rounding: half_even
	// SKIP (emax not supported): emax400 toSci  1.0000E-999     -> 1.0000E-999
	// SKIP (emax not supported): emax401 toSci  0.1E-999        -> 1E-1000     Subnormal
	// SKIP (emax not supported): emax402 toSci  0.1000E-999     -> 1.000E-1000 Subnormal
	// SKIP (emax not supported): emax403 toSci  0.0100E-999     -> 1.00E-1001  Subnormal
	// SKIP (emax not supported): emax404 toSci  0.0010E-999     -> 1.0E-1002   Subnormal
	// SKIP (emax not supported): emax405 toSci  0.0001E-999     -> 1E-1003     Subnormal
	// SKIP (emax not supported): emax406 toSci  0.00010E-999    -> 1E-1003     Subnormal Rounded
	// SKIP (emax not supported): emax407 toSci  0.00013E-999    -> 1E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax408 toSci  0.00015E-999    -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax409 toSci  0.00017E-999    -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax410 toSci  0.00023E-999    -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax411 toSci  0.00025E-999    -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax412 toSci  0.00027E-999    -> 3E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax413 toSci  0.000149E-999   -> 1E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax414 toSci  0.000150E-999   -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax415 toSci  0.000151E-999   -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax416 toSci  0.000249E-999   -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax417 toSci  0.000250E-999   -> 2E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax418 toSci  0.000251E-999   -> 3E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax419 toSci  0.00009E-999    -> 1E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax420 toSci  0.00005E-999    -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax421 toSci  0.00003E-999    -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax422 toSci  0.000009E-999   -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax423 toSci  0.000005E-999   -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax424 toSci  0.000003E-999   -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax425 toSci  0.001049E-999   -> 1.0E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax426 toSci  0.001050E-999   -> 1.0E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax427 toSci  0.001051E-999   -> 1.1E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax428 toSci  0.001149E-999   -> 1.1E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax429 toSci  0.001150E-999   -> 1.2E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax430 toSci  0.001151E-999   -> 1.2E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax432 toSci  0.010049E-999   -> 1.00E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax433 toSci  0.010050E-999   -> 1.00E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax434 toSci  0.010051E-999   -> 1.01E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax435 toSci  0.010149E-999   -> 1.01E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax436 toSci  0.010150E-999   -> 1.02E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax437 toSci  0.010151E-999   -> 1.02E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax440 toSci  0.10103E-999    -> 1.010E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax441 toSci  0.10105E-999    -> 1.010E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax442 toSci  0.10107E-999    -> 1.011E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax443 toSci  0.10113E-999    -> 1.011E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax444 toSci  0.10115E-999    -> 1.012E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax445 toSci  0.10117E-999    -> 1.012E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax450 toSci  1.10730E-1000   -> 1.107E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax451 toSci  1.10750E-1000   -> 1.108E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax452 toSci  1.10770E-1000   -> 1.108E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax453 toSci  1.10830E-1000   -> 1.108E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax454 toSci  1.10850E-1000   -> 1.108E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax455 toSci  1.10870E-1000   -> 1.109E-1000 Underflow Subnormal Inexact Rounded
	// make sure sign OK
	// SKIP (emax not supported): emax456 toSci  -0.10103E-999   -> -1.010E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax457 toSci  -0.10105E-999   -> -1.010E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax458 toSci  -0.10107E-999   -> -1.011E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax459 toSci  -0.10113E-999   -> -1.011E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax460 toSci  -0.10115E-999   -> -1.012E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax461 toSci  -0.10117E-999   -> -1.012E-1000 Underflow Subnormal Inexact Rounded
	// '999s' cases
	// SKIP (emax not supported): emax464 toSci  999999E-999         -> 1.0000E-993 Inexact Rounded
	// SKIP (emax not supported): emax465 toSci  99999.0E-999        -> 9.9999E-995 Rounded
	// SKIP (emax not supported): emax466 toSci  99999.E-999         -> 9.9999E-995
	// SKIP (emax not supported): emax467 toSci  9999.9E-999         -> 9.9999E-996
	// SKIP (emax not supported): emax468 toSci  999.99E-999         -> 9.9999E-997
	// SKIP (emax not supported): emax469 toSci  99.999E-999         -> 9.9999E-998
	// SKIP (emax not supported): emax470 toSci  9.9999E-999         -> 9.9999E-999
	// SKIP (emax not supported): emax471 toSci  0.99999E-999        -> 1.0000E-999 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax472 toSci  0.099999E-999       -> 1.000E-1000 Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax473 toSci  0.0099999E-999      -> 1.00E-1001  Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax474 toSci  0.00099999E-999     -> 1.0E-1002   Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax475 toSci  0.000099999E-999    -> 1E-1003     Underflow Subnormal Inexact Rounded
	// SKIP (emax not supported): emax476 toSci  0.0000099999E-999   -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax477 toSci  0.00000099999E-999  -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// SKIP (emax not supported): emax478 toSci  0.000000099999E-999 -> 0E-1003     Underflow Subnormal Inexact Rounded Clamped
	// Exponents with insignificant leading zeros
	// precision: 16
	// maxexponent: 999999999
	// minexponent: -999999999
	// basx1001 toSci  1e999999999 -> 1E+999999999
	{"basx1001", "1e999999999", "1E+999999999", false, 16, big.ToNearestEven},
	// basx1002 toSci  1e0999999999 -> 1E+999999999
	{"basx1002", "1e0999999999", "1E+999999999", false, 16, big.ToNearestEven},
	// basx1003 toSci  1e00999999999 -> 1E+999999999
	{"basx1003", "1e00999999999", "1E+999999999", false, 16, big.ToNearestEven},
	// basx1004 toSci  1e000999999999 -> 1E+999999999
	{"basx1004", "1e000999999999", "1E+999999999", false, 16, big.ToNearestEven},
	// basx1005 toSci  1e000000000000999999999 -> 1E+999999999
	{"basx1005", "1e000000000000999999999", "1E+999999999", false, 16, big.ToNearestEven},
	// basx1006 toSci  1e000000000001000000007 -> Infinity Overflow Inexact Rounded
	{"basx1006", "1e000000000001000000007", "Inf", true, 16, big.ToNearestEven},
	// basx1007 toSci  1e-999999999 -> 1E-999999999
	{"basx1007", "1e-999999999", "1E-999999999", false, 16, big.ToNearestEven},
	// basx1008 toSci  1e-0999999999 -> 1E-999999999
	{"basx1008", "1e-0999999999", "1E-999999999", false, 16, big.ToNearestEven},
	// basx1009 toSci  1e-00999999999 -> 1E-999999999
	{"basx1009", "1e-00999999999", "1E-999999999", false, 16, big.ToNearestEven},
	// basx1010 toSci  1e-000999999999 -> 1E-999999999
	{"basx1010", "1e-000999999999", "1E-999999999", false, 16, big.ToNearestEven},
	// basx1011 toSci  1e-000000000000999999999 -> 1E-999999999
	{"basx1011", "1e-000000000000999999999", "1E-999999999", false, 16, big.ToNearestEven},
	// basx1012 toSci  1e-000000000001000000007 -> 1E-1000000007 Subnormal
	{"basx1012", "1e-000000000001000000007", "1E-1000000007", false, 16, big.ToNearestEven},
	// Edge cases for int32 exponents...
	// basx1021 tosci 1e+2147483649 -> Infinity Overflow Inexact Rounded
	{"basx1021", "1e+2147483649", "Inf", true, 16, big.ToNearestEven},
	// basx1022 tosci 1e+2147483648 -> Infinity Overflow Inexact Rounded
	{"basx1022", "1e+2147483648", "Inf", true, 16, big.ToNearestEven},
	// basx1023 tosci 1e+2147483647 -> Infinity Overflow Inexact Rounded
	{"basx1023", "1e+2147483647", "Inf", true, 16, big.ToNearestEven},
	// basx1024 tosci 1e-2147483647 -> 0E-1000000014 Underflow Subnormal Inexact Rounded Clamped
	{"basx1024", "1e-2147483647", "0E-1000000014", true, 16, big.ToNearestEven},
	// basx1025 tosci 1e-2147483648 -> 0E-1000000014 Underflow Subnormal Inexact Rounded Clamped
	{"basx1025", "1e-2147483648", "0E-1000000014", true, 16, big.ToNearestEven},
	// basx1026 tosci 1e-2147483649 -> 0E-1000000014 Underflow Subnormal Inexact Rounded Clamped
	{"basx1026", "1e-2147483649", "0E-1000000014", true, 16, big.ToNearestEven},
	// same unbalanced
	// precision: 7
	// maxexponent: 96
	// minexponent: -95
	// basx1031 tosci 1e+2147483649 -> Infinity Overflow Inexact Rounded
	{"basx1031", "1e+2147483649", "Inf", true, 7, big.ToNearestEven},
	// basx1032 tosci 1e+2147483648 -> Infinity Overflow Inexact Rounded
	{"basx1032", "1e+2147483648", "Inf", true, 7, big.ToNearestEven},
	// basx1033 tosci 1e+2147483647 -> Infinity Overflow Inexact Rounded
	{"basx1033", "1e+2147483647", "Inf", true, 7, big.ToNearestEven},
	// basx1034 tosci 1e-2147483647 -> 0E-101 Underflow Subnormal Inexact Rounded Clamped
	{"basx1034", "1e-2147483647", "0E-101", true, 7, big.ToNearestEven},
	// basx1035 tosci 1e-2147483648 -> 0E-101 Underflow Subnormal Inexact Rounded Clamped
	{"basx1035", "1e-2147483648", "0E-101", true, 7, big.ToNearestEven},
	// basx1036 tosci 1e-2147483649 -> 0E-101 Underflow Subnormal Inexact Rounded Clamped
	{"basx1036", "1e-2147483649", "0E-101", true, 7, big.ToNearestEven},
	// check for double-rounded subnormals
	// precision: 5
	// maxexponent: 79
	// minexponent: -79
	// basx1041 toSci     1.52444E-80  ->  1.524E-80 Inexact Rounded Subnormal Underflow
	{"basx1041", "1.52444E-80", "1.524E-80", true, 5, big.ToNearestEven},
	// basx1042 toSci     1.52445E-80  ->  1.524E-80 Inexact Rounded Subnormal Underflow
	{"basx1042", "1.52445E-80", "1.524E-80", true, 5, big.ToNearestEven},
	// basx1043 toSci     1.52446E-80  ->  1.524E-80 Inexact Rounded Subnormal Underflow
	{"basx1043", "1.52446E-80", "1.524E-80", true, 5, big.ToNearestEven},
	// clamped zeros [see also clamp.decTest]
	// precision: 34
	// maxexponent: 6144
	// minexponent: -6143
	// SKIP (apply not supported): basx1061 apply   0e+10000  ->  0E+6144 Clamped
	// SKIP (apply not supported): basx1062 apply   0e-10000  ->  0E-6176 Clamped
	// SKIP (apply not supported): basx1063 apply  -0e+10000  -> -0E+6144 Clamped
	// SKIP (apply not supported): basx1064 apply  -0e-10000  -> -0E-6176 Clamped
	// precision: 16
	// maxexponent: 384
	// minexponent: -383
	// SKIP (apply not supported): basx1065 apply   0e+10000  ->  0E+384  Clamped
	// SKIP (apply not supported): basx1066 apply   0e-10000  ->  0E-398  Clamped
	// SKIP (apply not supported): basx1067 apply  -0e+10000  -> -0E+384  Clamped
	// SKIP (apply not supported): basx1068 apply  -0e-10000  -> -0E-398  Clamped
	// same with IEEE clamping
	// clamp: 1
	// precision: 34
	// maxexponent: 6144
	// minexponent: -6143
	// SKIP (apply not supported): basx1071 apply   0e+10000  ->  0E+6111 Clamped
	// SKIP (apply not supported): basx1072 apply   0e-10000  ->  0E-6176 Clamped
	// SKIP (apply not supported): basx1073 apply  -0e+10000  -> -0E+6111 Clamped
	// SKIP (apply not supported): basx1074 apply  -0e-10000  -> -0E-6176 Clamped
	// precision: 16
	// maxexponent: 384
	// minexponent: -383
	// SKIP (apply not supported): basx1075 apply   0e+10000  ->  0E+369  Clamped
	// SKIP (apply not supported): basx1076 apply   0e-10000  ->  0E-398  Clamped
	// SKIP (apply not supported): basx1077 apply  -0e+10000  -> -0E+369  Clamped
	// SKIP (apply not supported): basx1078 apply  -0e-10000  -> -0E-398  Clamped
}
